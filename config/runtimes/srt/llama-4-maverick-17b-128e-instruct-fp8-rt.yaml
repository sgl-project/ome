apiVersion: ome.io/v1beta1
kind: ClusterServingRuntime
metadata:
  name: srt-llama-4-maverick-17b-128e-instruct-fp8
spec:
  disabled: false
  supportedModelFormats:
    - modelFramework:
        name: transformers
        version: "4.51.0.dev0"
      modelFormat:
        name: safetensors
        version: "1.0.0"
      modelArchitecture: Llama4ForConditionalGeneration
      autoSelect: true
      priority: 2
  protocolVersions:
    - openAI
  modelSizeRange:
    min: 400B
    max: 402B
  engineConfig:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      prometheus.io/path: "/metrics"
    labels:
      logging-forward: enabled
    tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
    volumes:
      - name: dshm
        emptyDir:
          medium: Memory
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: node.kubernetes.io/instance-type
                  operator: In
                  values:
                    - BM.GPU.H100.8
    runner:
      name: ome-container
      image: ghcr.io/moirai-internal/sgl:dev2
      ports:
        - containerPort: 8080
          name: http1
          protocol: TCP
      command:
        - /bin/bash
        - '-lc'
        - --
      args:
        - |
          python3 -m sglang.launch_server \
          --host=0.0.0.0 \
          --port=8080 \
          --enable-metrics \
          --model-path="$MODEL_PATH" \
          --tp 8 \
          --context-length=430000 \
          --chat-template llama-4 \
          --attention-backend fa3 \
          --log-requests
      volumeMounts:
        - mountPath: /dev/shm
          name: dshm
      resources:
        requests:
          cpu: 128
          memory: 512Gi
          nvidia.com/gpu: 8
        limits:
          cpu: 128
          memory: 512Gi
          nvidia.com/gpu: 8

      readinessProbe:
        httpGet:
          path: /health_generate
          port: 8080
        failureThreshold: 3
        successThreshold: 1
        periodSeconds: 60
        timeoutSeconds: 200

      livenessProbe:
        httpGet:
          path: /health
          port: 8080
        failureThreshold: 5
        successThreshold: 1
        periodSeconds: 60
        timeoutSeconds: 60

      startupProbe:
        httpGet:
          path: /health_generate
          port: 8080
        failureThreshold: 150
        successThreshold: 1
        periodSeconds: 6
        initialDelaySeconds: 60
        timeoutSeconds: 30
  routerConfig:
    runner:
      name: router
      image: ghcr.io/moirai-internal/sgl-router:dev2
      resources:
        limits:
          cpu: "1"
          memory: "2Gi"
      ports:
        - containerPort: 8080
          name: http
      command:
        - sh
        - -c
        - >
          python3 -m sglang_router.launch_router
          --host "0.0.0.0"
          --port "8080"
          --service-discovery
          --service-discovery-namespace "${NAMESPACE}"
          --service-discovery-port 8080
          --selector component=engine ome.io/inferenceservice=${INFERENCESERVICE_NAME}
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFERENCESERVICE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['ome.io/inferenceservice']
