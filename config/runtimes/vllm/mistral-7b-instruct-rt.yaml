apiVersion: ome.io/v1beta1
kind: ClusterServingRuntime
metadata:
  name: vllm-mistral-7b-instruct
spec:
  disabled: false
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
  labels:
    logging-forward: enabled
  tolerations:
    - key: "nvidia.com/gpu"
      operator: "Exists"
      effect: "NoSchedule"
  volumes:
    - name: dshm
      emptyDir:
        medium: Memory
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                  - BM.GPU.B4.8
                  - BM.GPU4.8
                  - BM.GPU.A100-v2.8
                  - BM.GPU.H100.8
  supportedModelFormats:
    - modelFramework:
        name: transformers
        version: "4.36.2"
      modelFormat:
        name: safetensors
        version: "1"
      modelArchitecture: MistralForCausalLM
      autoSelect: true
      priority: 1
  modelSizeRange:
    min: 5B
    max: 9B
  protocolVersions:
    - openAI
  containers:
    - name: ome-container
      image: fra.ocir.io/idqj093njucb/official-vllm:v0.6.4.post1.0c9082a1
      ports:
        - containerPort: 8080
          name: http1
          protocol: TCP
      command:
        - /bin/bash
        - '-lc'
        - --
      args:
        - |
          python3 -m vllm.entrypoints.openai.api_server \
          --port=8080 \
          --model="$MODEL_PATH" \
          --middleware=vllm.entrypoints.openai.middleware.log_opc_header \
          --max-log-len=0 \
          --served-model-name=vllm-model \
          --tensor-parallel-size=2 \
          --preemption-mode=swap \
          --gpu-memory-utilization=0.90
      volumeMounts:
        - mountPath: /dev/shm
          name: dshm
      resources:
        requests:
          cpu: 10
          memory: 30Gi
          nvidia.com/gpu: 2
        limits:
          cpu: 10
          memory: 30Gi
          nvidia.com/gpu: 2

      readinessProbe:
        httpGet:
          path: /health
          port: 8080
        failureThreshold: 3
        successThreshold: 1
        periodSeconds: 60
        timeoutSeconds: 200

      livenessProbe:
        httpGet:
          path: /health
          port: 8080
        failureThreshold: 5
        successThreshold: 1
        periodSeconds: 60
        timeoutSeconds: 60

      startupProbe:
        httpGet:
          path: /health
          port: 8080
        failureThreshold: 150
        successThreshold: 1
        periodSeconds: 6
        initialDelaySeconds: 60
        timeoutSeconds: 30