apiVersion: ome.io/v1beta1
kind: ClusterServingRuntime
metadata:
  name: vllm-ray-multi-node-deepseek-v3
spec:
  disabled: false
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
  labels:
    logging-forward: enabled
  tolerations:
    - key: "nvidia.com/gpu"
      operator: "Exists"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                  - BM.GPU.H100.8
  supportedModelFormats:
    - modelFormat:
        name: safetensors
        version: "1"
      modelFramework:
        name: transformers
        version: "4.33.1"
      modelArchitecture: DeepseekV3ForCausalLM
      autoSelect: true
      priority: 1
  volumes:
    - name: dshm
      emptyDir:
        medium: Memory
    - emptyDir: { }
      name: log-volume
  protocolVersions:
    - openAI
  modelSizeRange:
    min: 650B
    max: 700B
  containers:
    - name: ome-container
      image: fra.ocir.io/idqj093njucb/official-vllm:v0.6.6.post1.328841d
      env:
        - name: VLLM_PORT
          value: "9000"
      command:
        - /bin/bash
        - '-lc'
        - --
      args:
        - |
          ulimit -n 65536;
          eval "$KUBERAY_GEN_RAY_START_CMD" &
          (
            while ! ray status | grep -q '0.0/16.0 GPU'; do
              echo 'Waiting for GPUs to be available...';
              sleep 2;
            done;
            python3 -m vllm.entrypoints.openai.api_server \
              --port=8080 \
              --model="$MODEL_PATH" \
              --max-log-len=0 \
              --middleware=vllm.entrypoints.openai.middleware.log_opc_header \
              --served-model-name=vllm-model \
              --tensor-parallel-size=8 \
              --pipeline-parallel-size=2 \
              --trust-remote-code \
              --gpu-memory-utilization=0.95 \
              --enable-chunked-prefill
          ) &
          wait
      volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /tmp/ray
          name: log-volume
      resources:
        requests:
          cpu: 128
          memory: 216Gi
          nvidia.com/gpu: 8
        limits:
          cpu: 128
          memory: 216Gi
          nvidia.com/gpu: 8

      livenessProbe:
        exec:
          command:
            - sh
            - '-c'
            - echo success
        initialDelaySeconds: 10
        periodSeconds: 10
      readinessProbe:
        exec:
          command:
            - sh
            - '-c'
            - echo success
        initialDelaySeconds: 10
        periodSeconds: 10