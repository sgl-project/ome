// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	context "context"

	omev1beta1 "github.com/sgl-project/ome/pkg/apis/ome/v1beta1"
	scheme "github.com/sgl-project/ome/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// BaseModelsGetter has a method to return a BaseModelInterface.
// A group's client should implement this interface.
type BaseModelsGetter interface {
	BaseModels(namespace string) BaseModelInterface
}

// BaseModelInterface has methods to work with BaseModel resources.
type BaseModelInterface interface {
	Create(ctx context.Context, baseModel *omev1beta1.BaseModel, opts v1.CreateOptions) (*omev1beta1.BaseModel, error)
	Update(ctx context.Context, baseModel *omev1beta1.BaseModel, opts v1.UpdateOptions) (*omev1beta1.BaseModel, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, baseModel *omev1beta1.BaseModel, opts v1.UpdateOptions) (*omev1beta1.BaseModel, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*omev1beta1.BaseModel, error)
	List(ctx context.Context, opts v1.ListOptions) (*omev1beta1.BaseModelList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *omev1beta1.BaseModel, err error)
	BaseModelExpansion
}

// baseModels implements BaseModelInterface
type baseModels struct {
	*gentype.ClientWithList[*omev1beta1.BaseModel, *omev1beta1.BaseModelList]
}

// newBaseModels returns a BaseModels
func newBaseModels(c *OmeV1beta1Client, namespace string) *baseModels {
	return &baseModels{
		gentype.NewClientWithList[*omev1beta1.BaseModel, *omev1beta1.BaseModelList](
			"basemodels",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *omev1beta1.BaseModel { return &omev1beta1.BaseModel{} },
			func() *omev1beta1.BaseModelList { return &omev1beta1.BaseModelList{} },
		),
	}
}
