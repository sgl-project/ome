// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/sgl-project/sgl-ome/pkg/apis/ome/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTrainingJobs implements TrainingJobInterface
type FakeTrainingJobs struct {
	Fake *FakeOmeV1beta1
	ns   string
}

var trainingjobsResource = v1beta1.SchemeGroupVersion.WithResource("trainingjobs")

var trainingjobsKind = v1beta1.SchemeGroupVersion.WithKind("TrainingJob")

// Get takes name of the trainingJob, and returns the corresponding trainingJob object, and an error if there is any.
func (c *FakeTrainingJobs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.TrainingJob, err error) {
	emptyResult := &v1beta1.TrainingJob{}
	obj, err := c.Fake.
		Invokes(testing.NewGetActionWithOptions(trainingjobsResource, c.ns, name, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.TrainingJob), err
}

// List takes label and field selectors, and returns the list of TrainingJobs that match those selectors.
func (c *FakeTrainingJobs) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.TrainingJobList, err error) {
	emptyResult := &v1beta1.TrainingJobList{}
	obj, err := c.Fake.
		Invokes(testing.NewListActionWithOptions(trainingjobsResource, trainingjobsKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.TrainingJobList{ListMeta: obj.(*v1beta1.TrainingJobList).ListMeta}
	for _, item := range obj.(*v1beta1.TrainingJobList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested trainingJobs.
func (c *FakeTrainingJobs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchActionWithOptions(trainingjobsResource, c.ns, opts))

}

// Create takes the representation of a trainingJob and creates it.  Returns the server's representation of the trainingJob, and an error, if there is any.
func (c *FakeTrainingJobs) Create(ctx context.Context, trainingJob *v1beta1.TrainingJob, opts v1.CreateOptions) (result *v1beta1.TrainingJob, err error) {
	emptyResult := &v1beta1.TrainingJob{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateActionWithOptions(trainingjobsResource, c.ns, trainingJob, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.TrainingJob), err
}

// Update takes the representation of a trainingJob and updates it. Returns the server's representation of the trainingJob, and an error, if there is any.
func (c *FakeTrainingJobs) Update(ctx context.Context, trainingJob *v1beta1.TrainingJob, opts v1.UpdateOptions) (result *v1beta1.TrainingJob, err error) {
	emptyResult := &v1beta1.TrainingJob{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateActionWithOptions(trainingjobsResource, c.ns, trainingJob, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.TrainingJob), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeTrainingJobs) UpdateStatus(ctx context.Context, trainingJob *v1beta1.TrainingJob, opts v1.UpdateOptions) (result *v1beta1.TrainingJob, err error) {
	emptyResult := &v1beta1.TrainingJob{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(trainingjobsResource, "status", c.ns, trainingJob, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.TrainingJob), err
}

// Delete takes name of the trainingJob and deletes it. Returns an error if one occurs.
func (c *FakeTrainingJobs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(trainingjobsResource, c.ns, name, opts), &v1beta1.TrainingJob{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTrainingJobs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionActionWithOptions(trainingjobsResource, c.ns, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.TrainingJobList{})
	return err
}

// Patch applies the patch and returns the patched trainingJob.
func (c *FakeTrainingJobs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.TrainingJob, err error) {
	emptyResult := &v1beta1.TrainingJob{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(trainingjobsResource, c.ns, name, pt, data, opts, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.TrainingJob), err
}
