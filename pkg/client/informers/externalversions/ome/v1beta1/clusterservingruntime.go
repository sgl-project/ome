// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	context "context"
	time "time"

	apisomev1beta1 "github.com/sgl-project/ome/pkg/apis/ome/v1beta1"
	versioned "github.com/sgl-project/ome/pkg/client/clientset/versioned"
	internalinterfaces "github.com/sgl-project/ome/pkg/client/informers/externalversions/internalinterfaces"
	omev1beta1 "github.com/sgl-project/ome/pkg/client/listers/ome/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ClusterServingRuntimeInformer provides access to a shared informer and lister for
// ClusterServingRuntimes.
type ClusterServingRuntimeInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() omev1beta1.ClusterServingRuntimeLister
}

type clusterServingRuntimeInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterServingRuntimeInformer constructs a new informer for ClusterServingRuntime type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterServingRuntimeInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterServingRuntimeInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterServingRuntimeInformer constructs a new informer for ClusterServingRuntime type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterServingRuntimeInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OmeV1beta1().ClusterServingRuntimes().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OmeV1beta1().ClusterServingRuntimes().Watch(context.Background(), options)
			},
			ListWithContextFunc: func(ctx context.Context, options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OmeV1beta1().ClusterServingRuntimes().List(ctx, options)
			},
			WatchFuncWithContext: func(ctx context.Context, options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OmeV1beta1().ClusterServingRuntimes().Watch(ctx, options)
			},
		},
		&apisomev1beta1.ClusterServingRuntime{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterServingRuntimeInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterServingRuntimeInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *clusterServingRuntimeInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apisomev1beta1.ClusterServingRuntime{}, f.defaultInformer)
}

func (f *clusterServingRuntimeInformer) Lister() omev1beta1.ClusterServingRuntimeLister {
	return omev1beta1.NewClusterServingRuntimeLister(f.Informer().GetIndexer())
}
