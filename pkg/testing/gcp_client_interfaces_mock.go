// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/fengg/workspace/ome/pkg/controller/v1beta1/aip/common/gcp_client_interfaces.go

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	billingpb "cloud.google.com/go/billing/apiv1/billingpb"
	adminpb "cloud.google.com/go/iam/admin/apiv1/adminpb"
	iampb "cloud.google.com/go/iam/apiv1/iampb"
	resourcemanagerpb "cloud.google.com/go/resourcemanager/apiv3/resourcemanagerpb"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
)

// MockGcpProjectClient is a mock of GcpProjectClient interface.
type MockGcpProjectClient struct {
	ctrl     *gomock.Controller
	recorder *MockGcpProjectClientMockRecorder
}

// MockGcpProjectClientMockRecorder is the mock recorder for MockGcpProjectClient.
type MockGcpProjectClientMockRecorder struct {
	mock *MockGcpProjectClient
}

// NewMockGcpProjectClient creates a new mock instance.
func NewMockGcpProjectClient(ctrl *gomock.Controller) *MockGcpProjectClient {
	mock := &MockGcpProjectClient{ctrl: ctrl}
	mock.recorder = &MockGcpProjectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpProjectClient) EXPECT() *MockGcpProjectClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGcpProjectClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGcpProjectClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGcpProjectClient)(nil).Close))
}

// CreateProject mocks base method.
func (m *MockGcpProjectClient) CreateProject(ctx context.Context, req *resourcemanagerpb.CreateProjectRequest, opts ...gax.CallOption) (*resourcemanagerpb.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProject", varargs...)
	ret0, _ := ret[0].(*resourcemanagerpb.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockGcpProjectClientMockRecorder) CreateProject(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockGcpProjectClient)(nil).CreateProject), varargs...)
}

// DeleteProject mocks base method.
func (m *MockGcpProjectClient) DeleteProject(ctx context.Context, req *resourcemanagerpb.DeleteProjectRequest, opts ...gax.CallOption) (*resourcemanagerpb.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProject", varargs...)
	ret0, _ := ret[0].(*resourcemanagerpb.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockGcpProjectClientMockRecorder) DeleteProject(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockGcpProjectClient)(nil).DeleteProject), varargs...)
}

// GetIamPolicy mocks base method.
func (m *MockGcpProjectClient) GetIamPolicy(ctx context.Context, req *iampb.GetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIamPolicy", varargs...)
	ret0, _ := ret[0].(*iampb.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIamPolicy indicates an expected call of GetIamPolicy.
func (mr *MockGcpProjectClientMockRecorder) GetIamPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIamPolicy", reflect.TypeOf((*MockGcpProjectClient)(nil).GetIamPolicy), varargs...)
}

// GetProject mocks base method.
func (m *MockGcpProjectClient) GetProject(ctx context.Context, req *resourcemanagerpb.GetProjectRequest, opts ...gax.CallOption) (*resourcemanagerpb.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProject", varargs...)
	ret0, _ := ret[0].(*resourcemanagerpb.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockGcpProjectClientMockRecorder) GetProject(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockGcpProjectClient)(nil).GetProject), varargs...)
}

// SetIamPolicy mocks base method.
func (m *MockGcpProjectClient) SetIamPolicy(ctx context.Context, req *iampb.SetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetIamPolicy", varargs...)
	ret0, _ := ret[0].(*iampb.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIamPolicy indicates an expected call of SetIamPolicy.
func (mr *MockGcpProjectClientMockRecorder) SetIamPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIamPolicy", reflect.TypeOf((*MockGcpProjectClient)(nil).SetIamPolicy), varargs...)
}

// UpdateProject mocks base method.
func (m *MockGcpProjectClient) UpdateProject(ctx context.Context, req *resourcemanagerpb.UpdateProjectRequest, opts ...gax.CallOption) (*resourcemanagerpb.Project, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProject", varargs...)
	ret0, _ := ret[0].(*resourcemanagerpb.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockGcpProjectClientMockRecorder) UpdateProject(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockGcpProjectClient)(nil).UpdateProject), varargs...)
}

// MockGcpIamClient is a mock of GcpIamClient interface.
type MockGcpIamClient struct {
	ctrl     *gomock.Controller
	recorder *MockGcpIamClientMockRecorder
}

// MockGcpIamClientMockRecorder is the mock recorder for MockGcpIamClient.
type MockGcpIamClientMockRecorder struct {
	mock *MockGcpIamClient
}

// NewMockGcpIamClient creates a new mock instance.
func NewMockGcpIamClient(ctrl *gomock.Controller) *MockGcpIamClient {
	mock := &MockGcpIamClient{ctrl: ctrl}
	mock.recorder = &MockGcpIamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpIamClient) EXPECT() *MockGcpIamClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGcpIamClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGcpIamClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGcpIamClient)(nil).Close))
}

// CreateServiceAccount mocks base method.
func (m *MockGcpIamClient) CreateServiceAccount(ctx context.Context, req *adminpb.CreateServiceAccountRequest, opts ...gax.CallOption) (*adminpb.ServiceAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccount", varargs...)
	ret0, _ := ret[0].(*adminpb.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockGcpIamClientMockRecorder) CreateServiceAccount(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockGcpIamClient)(nil).CreateServiceAccount), varargs...)
}

// CreateServiceAccountKey mocks base method.
func (m *MockGcpIamClient) CreateServiceAccountKey(ctx context.Context, req *adminpb.CreateServiceAccountKeyRequest, opts ...gax.CallOption) (*adminpb.ServiceAccountKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccountKey", varargs...)
	ret0, _ := ret[0].(*adminpb.ServiceAccountKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccountKey indicates an expected call of CreateServiceAccountKey.
func (mr *MockGcpIamClientMockRecorder) CreateServiceAccountKey(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccountKey", reflect.TypeOf((*MockGcpIamClient)(nil).CreateServiceAccountKey), varargs...)
}

// DeleteServiceAccount mocks base method.
func (m *MockGcpIamClient) DeleteServiceAccount(ctx context.Context, req *adminpb.DeleteServiceAccountRequest, opts ...gax.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceAccount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockGcpIamClientMockRecorder) DeleteServiceAccount(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockGcpIamClient)(nil).DeleteServiceAccount), varargs...)
}

// MockGcpBillingClient is a mock of GcpBillingClient interface.
type MockGcpBillingClient struct {
	ctrl     *gomock.Controller
	recorder *MockGcpBillingClientMockRecorder
}

// MockGcpBillingClientMockRecorder is the mock recorder for MockGcpBillingClient.
type MockGcpBillingClientMockRecorder struct {
	mock *MockGcpBillingClient
}

// NewMockGcpBillingClient creates a new mock instance.
func NewMockGcpBillingClient(ctrl *gomock.Controller) *MockGcpBillingClient {
	mock := &MockGcpBillingClient{ctrl: ctrl}
	mock.recorder = &MockGcpBillingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpBillingClient) EXPECT() *MockGcpBillingClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGcpBillingClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGcpBillingClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGcpBillingClient)(nil).Close))
}

// UpdateProjectBillingInfo mocks base method.
func (m *MockGcpBillingClient) UpdateProjectBillingInfo(ctx context.Context, req *billingpb.UpdateProjectBillingInfoRequest, opts ...gax.CallOption) (*billingpb.ProjectBillingInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectBillingInfo", varargs...)
	ret0, _ := ret[0].(*billingpb.ProjectBillingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectBillingInfo indicates an expected call of UpdateProjectBillingInfo.
func (mr *MockGcpBillingClientMockRecorder) UpdateProjectBillingInfo(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectBillingInfo", reflect.TypeOf((*MockGcpBillingClient)(nil).UpdateProjectBillingInfo), varargs...)
}

// MockGcpServiceUsageClient is a mock of GcpServiceUsageClient interface.
type MockGcpServiceUsageClient struct {
	ctrl     *gomock.Controller
	recorder *MockGcpServiceUsageClientMockRecorder
}

// MockGcpServiceUsageClientMockRecorder is the mock recorder for MockGcpServiceUsageClient.
type MockGcpServiceUsageClientMockRecorder struct {
	mock *MockGcpServiceUsageClient
}

// NewMockGcpServiceUsageClient creates a new mock instance.
func NewMockGcpServiceUsageClient(ctrl *gomock.Controller) *MockGcpServiceUsageClient {
	mock := &MockGcpServiceUsageClient{ctrl: ctrl}
	mock.recorder = &MockGcpServiceUsageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpServiceUsageClient) EXPECT() *MockGcpServiceUsageClientMockRecorder {
	return m.recorder
}

// Enable mocks base method.
func (m *MockGcpServiceUsageClient) Enable(projectId, apiName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", projectId, apiName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockGcpServiceUsageClientMockRecorder) Enable(projectId, apiName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockGcpServiceUsageClient)(nil).Enable), projectId, apiName)
}
