/* Generated with cbindgen:0.29.0 */

/* Warning: This file is auto-generated by cbindgen. Do not modify manually. */

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct Option_XetProgressCallback Option_XetProgressCallback;

typedef struct XetClient XetClient;

typedef struct XetError {
  int32_t code;
  char *message;
  char *details;
} XetError;

typedef struct XetConfig {
  const char *endpoint;
  const char *token;
  const char *cache_dir;
  uint32_t max_concurrent_downloads;
  bool enable_dedup;
} XetConfig;

typedef struct XetFileInfoC {
  char *path;
  char *hash;
  uint64_t size;
} XetFileInfoC;

typedef struct XetFileList {
  struct XetFileInfoC *files;
  uintptr_t count;
} XetFileList;

typedef struct XetDownloadRequest {
  const char *repo_id;
  const char *repo_type;
  const char *revision;
  const char *filename;
  const char *local_dir;
} XetDownloadRequest;

typedef struct XetCancellationToken {
  bool (*callback)(void*);
  void *user_data;
} XetCancellationToken;

xet_ void xet_version_1_0_0(void) ;

/**
 * Free an error returned by XET functions.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - `err` is either null or a valid pointer returned by an XET function
 * - `err` is not used after calling this function
 */
xet_ void xet_free_error(struct XetError *err) ;

/**
 * Free a string returned by XET functions.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - `s` is either null or a valid pointer returned by an XET function
 * - `s` is not used after calling this function
 */
xet_ void xet_free_string(char *s) ;

/**
 * Create a new XET client.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - `config` is either null or a valid pointer to XetConfig
 * - Returned pointer must be freed with `xet_client_free`
 */
xet_ struct XetClient *xet_client_new(const struct XetConfig *config) ;

/**
 * Free an XET client.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - `client` is either null or a valid pointer returned by `xet_client_new`
 * - `client` is not used after calling this function
 */
xet_ void xet_client_free(struct XetClient *client) ;

/**
 * Register (or clear) the FFI progress callback.
 *
 * # Safety
 *
 * * `client` must be a valid pointer returned by `xet_client_new`.
 * * `callback` and `user_data` must remain valid for the duration of the registration.
 * * Callers must eventually unregister (pass NULL) before freeing the client.
 */
xet_
struct XetError *xet_client_set_progress_callback(struct XetClient *client,
                                                  struct Option_XetProgressCallback callback,
                                                  void *user_data,
                                                  uint32_t throttle_ms)
;

/**
 * List files in a repository.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - All pointers are valid or null
 * - Strings are valid UTF-8
 * - `out_files` must be freed with `xet_free_file_list`
 */
xet_
struct XetError *xet_list_files(struct XetClient *client,
                                const char *repo_id,
                                const char *revision,
                                struct XetFileList **out_files)
;

/**
 * Download a file from a repository.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - All pointers are valid or null
 * - Strings are valid UTF-8
 * - `out_path` must be freed with `xet_free_string`
 */
xet_
struct XetError *xet_download_file(struct XetClient *client,
                                   const struct XetDownloadRequest *request,
                                   const struct XetCancellationToken *cancel_token,
                                   char **out_path)
;

/**
 * Download all files from a repository.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - All pointers are valid or null
 * - Strings are valid UTF-8
 * - `out_path` must be freed with `xet_free_string`
 */
xet_
struct XetError *xet_download_snapshot(struct XetClient *client,
                                       const char *repo_id,
                                       const char *repo_type,
                                       const char *revision,
                                       const char *local_dir,
                                       const struct XetCancellationToken *cancel_token,
                                       char **out_path)
;

/**
 * Free a file list returned by `xet_list_files`.
 *
 * # Safety
 *
 * Caller must ensure that:
 * - `list` is either null or a valid pointer returned by `xet_list_files`
 * - `list` is not used after calling this function
 */
xet_ void xet_free_file_list(struct XetFileList *list) ;
