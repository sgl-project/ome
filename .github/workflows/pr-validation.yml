name: PR Validation

on:
  pull_request:
    branches: [ main, release-* ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          make controller-gen
          make envtest

      - name: Run fmt and vet
        run: |
          make fmt
          make vet
          git diff --exit-code || (echo "::error::Code is not formatted. Please run 'make fmt'" && exit 1)

      # - name: Run linter
      #   run: make ci-lint
      # TODO: Re-enable linting once fixed

  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Remove dependency so tests always run independently
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          cache: true

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            bin/
          key: ${{ runner.os }}-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-test-
            ${{ runner.os }}-go-

      - name: Run tests
        run: |
          make test

      - name: Check coverage threshold
        run: |
          echo "::group::Coverage Report"
          make coverage
          echo "::endgroup::"

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage-*.out
          retention-days: 7

      - name: Build binaries
        run: |
          make ome-manager
          make model-agent

  docker-validation:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks
    strategy:
      matrix:
        image: [ome-image, model-agent-image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          make ${{ matrix.image }}
        env:
          TAG: pr-${{ github.event.pull_request.number }}-${{ github.run_number }}
          REGISTRY: local

  helm-validation:
    name: Helm Chart Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Lint Helm charts
        run: make helm-lint

      - name: Test Helm chart rendering
        run: |
          helm template test-crd ./charts/ome-crd --debug
          helm template test-resources ./charts/ome-resources --debug

  summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [quick-checks, test-and-build, docker-validation, helm-validation]
    if: always()
    steps:
      - name: PR Status Summary
        uses: actions/github-script@v7
        with:
          script: |
            const needs = context.payload.workflow_run ? 
              context.payload.workflow_run.pull_requests[0].number : 
              context.issue.number;
            
            const jobs = {
              'quick-checks': '${{ needs.quick-checks.result }}',
              'test-and-build': '${{ needs.test-and-build.result }}',
              'docker-validation': '${{ needs.docker-validation.result }}',
              'helm-validation': '${{ needs.helm-validation.result }}'
            };
            
            let allPassed = true;
            let summary = '## üìã PR Validation Summary\n\n';
            
            for (const [job, status] of Object.entries(jobs)) {
              const emoji = status === 'success' ? '‚úÖ' : status === 'skipped' ? '‚è≠Ô∏è' : '‚ùå';
              summary += `${emoji} **${job}**: ${status}\n`;
              if (status !== 'success' && status !== 'skipped') {
                allPassed = false;
              }
            }
            
            summary += '\n';
            summary += allPassed ? 
              '### ‚úÖ All checks passed! Ready for review.' : 
              '### ‚ùå Some checks failed. Please review the errors above.';
            
            core.summary.addRaw(summary).write();