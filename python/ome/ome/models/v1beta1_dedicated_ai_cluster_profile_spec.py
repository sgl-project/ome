# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1DedicatedAIClusterProfileSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "affinity": "V1Affinity",
        "count": "int",
        "disabled": "bool",
        "node_selector": "dict(str, str)",
        "priority_class_name": "str",
        "resources": "V1ResourceRequirements",
        "tolerations": "list[V1Toleration]",
    }

    attribute_map = {
        "affinity": "affinity",
        "count": "count",
        "disabled": "disabled",
        "node_selector": "nodeSelector",
        "priority_class_name": "priorityClassName",
        "resources": "resources",
        "tolerations": "tolerations",
    }

    def __init__(
        self,
        affinity=None,
        count=0,
        disabled=None,
        node_selector=None,
        priority_class_name=None,
        resources=None,
        tolerations=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1DedicatedAIClusterProfileSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._count = None
        self._disabled = None
        self._node_selector = None
        self._priority_class_name = None
        self._resources = None
        self._tolerations = None
        self.discriminator = None

        self.affinity = affinity
        if count is not None:
            self.count = count
        if disabled is not None:
            self.disabled = disabled
        if node_selector is not None:
            self.node_selector = node_selector
        if priority_class_name is not None:
            self.priority_class_name = priority_class_name
        self.resources = resources
        if tolerations is not None:
            self.tolerations = tolerations

    @property
    def affinity(self):
        """Gets the affinity of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501


        :return: The affinity of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :rtype: V1Affinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this V1beta1DedicatedAIClusterProfileSpec.


        :param affinity: The affinity of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :type: V1Affinity
        """
        if self.local_vars_configuration.client_side_validation and affinity is None:  # noqa: E501
            raise ValueError("Invalid value for `affinity`, must not be `None`")  # noqa: E501

        self._affinity = affinity

    @property
    def count(self):
        """Gets the count of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501

        Count is the number of units in the DAC  # noqa: E501

        :return: The count of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this V1beta1DedicatedAIClusterProfileSpec.

        Count is the number of units in the DAC  # noqa: E501

        :param count: The count of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def disabled(self):
        """Gets the disabled of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501

        Set to true to disable use of this profile.  # noqa: E501

        :return: The disabled of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1beta1DedicatedAIClusterProfileSpec.

        Set to true to disable use of this profile.  # noqa: E501

        :param disabled: The disabled of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def node_selector(self):
        """Gets the node_selector of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501

        NodeSelector specifies node selectors for scheduling the resources on specific nodes.  # noqa: E501

        :return: The node_selector of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this V1beta1DedicatedAIClusterProfileSpec.

        NodeSelector specifies node selectors for scheduling the resources on specific nodes.  # noqa: E501

        :param node_selector: The node_selector of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501

        PriorityClassName is the priority class assigned to workloads in this Dedicated AI Cluster.  # noqa: E501

        :return: The priority_class_name of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this V1beta1DedicatedAIClusterProfileSpec.

        PriorityClassName is the priority class assigned to workloads in this Dedicated AI Cluster.  # noqa: E501

        :param priority_class_name: The priority_class_name of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :type: str
        """

        self._priority_class_name = priority_class_name

    @property
    def resources(self):
        """Gets the resources of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501


        :return: The resources of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this V1beta1DedicatedAIClusterProfileSpec.


        :param resources: The resources of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :type: V1ResourceRequirements
        """
        if self.local_vars_configuration.client_side_validation and resources is None:  # noqa: E501
            raise ValueError("Invalid value for `resources`, must not be `None`")  # noqa: E501

        self._resources = resources

    @property
    def tolerations(self):
        """Gets the tolerations of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501

        Tolerations specifies the tolerations for scheduling the resources on tainted nodes.  # noqa: E501

        :return: The tolerations of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :rtype: list[V1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this V1beta1DedicatedAIClusterProfileSpec.

        Tolerations specifies the tolerations for scheduling the resources on tainted nodes.  # noqa: E501

        :param tolerations: The tolerations of this V1beta1DedicatedAIClusterProfileSpec.  # noqa: E501
        :type: list[V1Toleration]
        """

        self._tolerations = tolerations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1DedicatedAIClusterProfileSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1DedicatedAIClusterProfileSpec):
            return True

        return self.to_dict() != other.to_dict()
