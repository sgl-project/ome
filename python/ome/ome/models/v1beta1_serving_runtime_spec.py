# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1ServingRuntimeSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "affinity": "V1Affinity",
        "annotations": "dict(str, str)",
        "built_in_adapter": "V1beta1BuiltInAdapter",
        "compartment_id": "str",
        "containers": "list[V1Container]",
        "decoder_config": "V1beta1DecoderSpec",
        "disabled": "bool",
        "dns_policy": "str",
        "engine_config": "V1beta1EngineSpec",
        "host_ipc": "bool",
        "host_network": "bool",
        "http_data_endpoint": "str",
        "image_pull_secrets": "list[V1LocalObjectReference]",
        "labels": "dict(str, str)",
        "model_size_range": "V1beta1ModelSizeRangeSpec",
        "node_selector": "dict(str, str)",
        "pipeline_parallelism": "bool",
        "protocol_versions": "list[str]",
        "replicas": "int",
        "router_config": "V1beta1RouterSpec",
        "scheduler_name": "str",
        "supported_model_formats": "list[V1beta1SupportedModelFormat]",
        "tolerations": "list[V1Toleration]",
        "volumes": "list[V1Volume]",
        "workers": "V1beta1WorkerPodSpec",
    }

    attribute_map = {
        "affinity": "affinity",
        "annotations": "annotations",
        "built_in_adapter": "builtInAdapter",
        "compartment_id": "compartmentID",
        "containers": "containers",
        "decoder_config": "decoderConfig",
        "disabled": "disabled",
        "dns_policy": "dnsPolicy",
        "engine_config": "engineConfig",
        "host_ipc": "hostIPC",
        "host_network": "hostNetwork",
        "http_data_endpoint": "httpDataEndpoint",
        "image_pull_secrets": "imagePullSecrets",
        "labels": "labels",
        "model_size_range": "modelSizeRange",
        "node_selector": "nodeSelector",
        "pipeline_parallelism": "pipelineParallelism",
        "protocol_versions": "protocolVersions",
        "replicas": "replicas",
        "router_config": "routerConfig",
        "scheduler_name": "schedulerName",
        "supported_model_formats": "supportedModelFormats",
        "tolerations": "tolerations",
        "volumes": "volumes",
        "workers": "workers",
    }

    def __init__(
        self,
        affinity=None,
        annotations=None,
        built_in_adapter=None,
        compartment_id=None,
        containers=None,
        decoder_config=None,
        disabled=None,
        dns_policy=None,
        engine_config=None,
        host_ipc=None,
        host_network=None,
        http_data_endpoint=None,
        image_pull_secrets=None,
        labels=None,
        model_size_range=None,
        node_selector=None,
        pipeline_parallelism=None,
        protocol_versions=None,
        replicas=None,
        router_config=None,
        scheduler_name=None,
        supported_model_formats=None,
        tolerations=None,
        volumes=None,
        workers=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1ServingRuntimeSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._annotations = None
        self._built_in_adapter = None
        self._compartment_id = None
        self._containers = None
        self._decoder_config = None
        self._disabled = None
        self._dns_policy = None
        self._engine_config = None
        self._host_ipc = None
        self._host_network = None
        self._http_data_endpoint = None
        self._image_pull_secrets = None
        self._labels = None
        self._model_size_range = None
        self._node_selector = None
        self._pipeline_parallelism = None
        self._protocol_versions = None
        self._replicas = None
        self._router_config = None
        self._scheduler_name = None
        self._supported_model_formats = None
        self._tolerations = None
        self._volumes = None
        self._workers = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        if annotations is not None:
            self.annotations = annotations
        if built_in_adapter is not None:
            self.built_in_adapter = built_in_adapter
        if compartment_id is not None:
            self.compartment_id = compartment_id
        self.containers = containers
        if decoder_config is not None:
            self.decoder_config = decoder_config
        if disabled is not None:
            self.disabled = disabled
        if dns_policy is not None:
            self.dns_policy = dns_policy
        if engine_config is not None:
            self.engine_config = engine_config
        if host_ipc is not None:
            self.host_ipc = host_ipc
        if host_network is not None:
            self.host_network = host_network
        if http_data_endpoint is not None:
            self.http_data_endpoint = http_data_endpoint
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if labels is not None:
            self.labels = labels
        if model_size_range is not None:
            self.model_size_range = model_size_range
        if node_selector is not None:
            self.node_selector = node_selector
        if pipeline_parallelism is not None:
            self.pipeline_parallelism = pipeline_parallelism
        if protocol_versions is not None:
            self.protocol_versions = protocol_versions
        if replicas is not None:
            self.replicas = replicas
        if router_config is not None:
            self.router_config = router_config
        if scheduler_name is not None:
            self.scheduler_name = scheduler_name
        if supported_model_formats is not None:
            self.supported_model_formats = supported_model_formats
        if tolerations is not None:
            self.tolerations = tolerations
        if volumes is not None:
            self.volumes = volumes
        if workers is not None:
            self.workers = workers

    @property
    def affinity(self):
        """Gets the affinity of this V1beta1ServingRuntimeSpec.  # noqa: E501


        :return: The affinity of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: V1Affinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this V1beta1ServingRuntimeSpec.


        :param affinity: The affinity of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: V1Affinity
        """

        self._affinity = affinity

    @property
    def annotations(self):
        """Gets the annotations of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Annotations that will be add to the pod. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :return: The annotations of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this V1beta1ServingRuntimeSpec.

        Annotations that will be add to the pod. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :param annotations: The annotations of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def built_in_adapter(self):
        """Gets the built_in_adapter of this V1beta1ServingRuntimeSpec.  # noqa: E501


        :return: The built_in_adapter of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1BuiltInAdapter
        """
        return self._built_in_adapter

    @built_in_adapter.setter
    def built_in_adapter(self, built_in_adapter):
        """Sets the built_in_adapter of this V1beta1ServingRuntimeSpec.


        :param built_in_adapter: The built_in_adapter of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: V1beta1BuiltInAdapter
        """

        self._built_in_adapter = built_in_adapter

    @property
    def compartment_id(self):
        """Gets the compartment_id of this V1beta1ServingRuntimeSpec.  # noqa: E501

        The compartment ID to use for the serving runtime  # noqa: E501

        :return: The compartment_id of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._compartment_id

    @compartment_id.setter
    def compartment_id(self, compartment_id):
        """Sets the compartment_id of this V1beta1ServingRuntimeSpec.

        The compartment ID to use for the serving runtime  # noqa: E501

        :param compartment_id: The compartment_id of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._compartment_id = compartment_id

    @property
    def containers(self):
        """Gets the containers of this V1beta1ServingRuntimeSpec.  # noqa: E501

        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.  # noqa: E501

        :return: The containers of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: list[V1Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this V1beta1ServingRuntimeSpec.

        List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.  # noqa: E501

        :param containers: The containers of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: list[V1Container]
        """
        if self.local_vars_configuration.client_side_validation and containers is None:  # noqa: E501
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def decoder_config(self):
        """Gets the decoder_config of this V1beta1ServingRuntimeSpec.  # noqa: E501


        :return: The decoder_config of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1DecoderSpec
        """
        return self._decoder_config

    @decoder_config.setter
    def decoder_config(self, decoder_config):
        """Sets the decoder_config of this V1beta1ServingRuntimeSpec.


        :param decoder_config: The decoder_config of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: V1beta1DecoderSpec
        """

        self._decoder_config = decoder_config

    @property
    def disabled(self):
        """Gets the disabled of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Set to true to disable use of this runtime  # noqa: E501

        :return: The disabled of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1beta1ServingRuntimeSpec.

        Set to true to disable use of this runtime  # noqa: E501

        :param disabled: The disabled of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def dns_policy(self):
        """Gets the dns_policy of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.  # noqa: E501

        :return: The dns_policy of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._dns_policy

    @dns_policy.setter
    def dns_policy(self, dns_policy):
        """Sets the dns_policy of this V1beta1ServingRuntimeSpec.

        Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.  # noqa: E501

        :param dns_policy: The dns_policy of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._dns_policy = dns_policy

    @property
    def engine_config(self):
        """Gets the engine_config of this V1beta1ServingRuntimeSpec.  # noqa: E501


        :return: The engine_config of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1EngineSpec
        """
        return self._engine_config

    @engine_config.setter
    def engine_config(self, engine_config):
        """Sets the engine_config of this V1beta1ServingRuntimeSpec.


        :param engine_config: The engine_config of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: V1beta1EngineSpec
        """

        self._engine_config = engine_config

    @property
    def host_ipc(self):
        """Gets the host_ipc of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Use the host's ipc namespace. Optional: Default to false.  # noqa: E501

        :return: The host_ipc of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: bool
        """
        return self._host_ipc

    @host_ipc.setter
    def host_ipc(self, host_ipc):
        """Sets the host_ipc of this V1beta1ServingRuntimeSpec.

        Use the host's ipc namespace. Optional: Default to false.  # noqa: E501

        :param host_ipc: The host_ipc of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: bool
        """

        self._host_ipc = host_ipc

    @property
    def host_network(self):
        """Gets the host_network of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.  # noqa: E501

        :return: The host_network of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: bool
        """
        return self._host_network

    @host_network.setter
    def host_network(self, host_network):
        """Sets the host_network of this V1beta1ServingRuntimeSpec.

        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.  # noqa: E501

        :param host_network: The host_network of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: bool
        """

        self._host_network = host_network

    @property
    def http_data_endpoint(self):
        """Gets the http_data_endpoint of this V1beta1ServingRuntimeSpec.  # noqa: E501

        HTTP endpoint for inferencing  # noqa: E501

        :return: The http_data_endpoint of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._http_data_endpoint

    @http_data_endpoint.setter
    def http_data_endpoint(self, http_data_endpoint):
        """Sets the http_data_endpoint of this V1beta1ServingRuntimeSpec.

        HTTP endpoint for inferencing  # noqa: E501

        :param http_data_endpoint: The http_data_endpoint of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._http_data_endpoint = http_data_endpoint

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this V1beta1ServingRuntimeSpec.  # noqa: E501

        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :return: The image_pull_secrets of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: list[V1LocalObjectReference]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this V1beta1ServingRuntimeSpec.

        ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod  # noqa: E501

        :param image_pull_secrets: The image_pull_secrets of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: list[V1LocalObjectReference]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def labels(self):
        """Gets the labels of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Labels that will be add to the pod. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :return: The labels of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1beta1ServingRuntimeSpec.

        Labels that will be add to the pod. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :param labels: The labels of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def model_size_range(self):
        """Gets the model_size_range of this V1beta1ServingRuntimeSpec.  # noqa: E501


        :return: The model_size_range of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1ModelSizeRangeSpec
        """
        return self._model_size_range

    @model_size_range.setter
    def model_size_range(self, model_size_range):
        """Sets the model_size_range of this V1beta1ServingRuntimeSpec.


        :param model_size_range: The model_size_range of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: V1beta1ModelSizeRangeSpec
        """

        self._model_size_range = model_size_range

    @property
    def node_selector(self):
        """Gets the node_selector of this V1beta1ServingRuntimeSpec.  # noqa: E501

        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/  # noqa: E501

        :return: The node_selector of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this V1beta1ServingRuntimeSpec.

        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/  # noqa: E501

        :param node_selector: The node_selector of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def pipeline_parallelism(self):
        """Gets the pipeline_parallelism of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Enable pipeline parallelism for the runtime When pipeline parallelism is enabled, the runtime informs the model server to use pipeline parallelism for model inference with multiple compute nodes via Ray Cluster and vLLM only. The number of compute nodes is determined by the number of replicas in the Inference Service. The worker node will be minimum replica minus one, which is reserved for head node. This field is deprecated and will be removed in a future release. Please use the annotation \"ome.io/deploymentMode: MultiNodeRayVLLM\" instead.  # noqa: E501

        :return: The pipeline_parallelism of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: bool
        """
        return self._pipeline_parallelism

    @pipeline_parallelism.setter
    def pipeline_parallelism(self, pipeline_parallelism):
        """Sets the pipeline_parallelism of this V1beta1ServingRuntimeSpec.

        Enable pipeline parallelism for the runtime When pipeline parallelism is enabled, the runtime informs the model server to use pipeline parallelism for model inference with multiple compute nodes via Ray Cluster and vLLM only. The number of compute nodes is determined by the number of replicas in the Inference Service. The worker node will be minimum replica minus one, which is reserved for head node. This field is deprecated and will be removed in a future release. Please use the annotation \"ome.io/deploymentMode: MultiNodeRayVLLM\" instead.  # noqa: E501

        :param pipeline_parallelism: The pipeline_parallelism of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: bool
        """

        self._pipeline_parallelism = pipeline_parallelism

    @property
    def protocol_versions(self):
        """Gets the protocol_versions of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Supported protocol versions (i.e. openAI or cohere or openInference-v1 or openInference-v2)  # noqa: E501

        :return: The protocol_versions of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocol_versions

    @protocol_versions.setter
    def protocol_versions(self, protocol_versions):
        """Sets the protocol_versions of this V1beta1ServingRuntimeSpec.

        Supported protocol versions (i.e. openAI or cohere or openInference-v1 or openInference-v2)  # noqa: E501

        :param protocol_versions: The protocol_versions of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: list[str]
        """

        self._protocol_versions = protocol_versions

    @property
    def replicas(self):
        """Gets the replicas of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Configure the number of replicas in the Deployments generated by this ServingRuntime If specified, this overrides the podsPerRuntime configuration value  # noqa: E501

        :return: The replicas of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this V1beta1ServingRuntimeSpec.

        Configure the number of replicas in the Deployments generated by this ServingRuntime If specified, this overrides the podsPerRuntime configuration value  # noqa: E501

        :param replicas: The replicas of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def router_config(self):
        """Gets the router_config of this V1beta1ServingRuntimeSpec.  # noqa: E501


        :return: The router_config of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1RouterSpec
        """
        return self._router_config

    @router_config.setter
    def router_config(self, router_config):
        """Sets the router_config of this V1beta1ServingRuntimeSpec.


        :param router_config: The router_config of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: V1beta1RouterSpec
        """

        self._router_config = router_config

    @property
    def scheduler_name(self):
        """Gets the scheduler_name of this V1beta1ServingRuntimeSpec.  # noqa: E501

        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.  # noqa: E501

        :return: The scheduler_name of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._scheduler_name

    @scheduler_name.setter
    def scheduler_name(self, scheduler_name):
        """Sets the scheduler_name of this V1beta1ServingRuntimeSpec.

        If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.  # noqa: E501

        :param scheduler_name: The scheduler_name of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._scheduler_name = scheduler_name

    @property
    def supported_model_formats(self):
        """Gets the supported_model_formats of this V1beta1ServingRuntimeSpec.  # noqa: E501

        Model formats and version supported by this runtime  # noqa: E501

        :return: The supported_model_formats of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: list[V1beta1SupportedModelFormat]
        """
        return self._supported_model_formats

    @supported_model_formats.setter
    def supported_model_formats(self, supported_model_formats):
        """Sets the supported_model_formats of this V1beta1ServingRuntimeSpec.

        Model formats and version supported by this runtime  # noqa: E501

        :param supported_model_formats: The supported_model_formats of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: list[V1beta1SupportedModelFormat]
        """

        self._supported_model_formats = supported_model_formats

    @property
    def tolerations(self):
        """Gets the tolerations of this V1beta1ServingRuntimeSpec.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: list[V1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this V1beta1ServingRuntimeSpec.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: list[V1Toleration]
        """

        self._tolerations = tolerations

    @property
    def volumes(self):
        """Gets the volumes of this V1beta1ServingRuntimeSpec.  # noqa: E501

        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes  # noqa: E501

        :return: The volumes of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: list[V1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this V1beta1ServingRuntimeSpec.

        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes  # noqa: E501

        :param volumes: The volumes of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: list[V1Volume]
        """

        self._volumes = volumes

    @property
    def workers(self):
        """Gets the workers of this V1beta1ServingRuntimeSpec.  # noqa: E501


        :return: The workers of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1WorkerPodSpec
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this V1beta1ServingRuntimeSpec.


        :param workers: The workers of this V1beta1ServingRuntimeSpec.  # noqa: E501
        :type: V1beta1WorkerPodSpec
        """

        self._workers = workers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ServingRuntimeSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1ServingRuntimeSpec):
            return True

        return self.to_dict() != other.to_dict()
