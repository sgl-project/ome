# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1ServiceMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "engine": "str",
        "gpu_count": "int",
        "gpu_type": "str",
        "version": "str",
    }

    attribute_map = {
        "engine": "engine",
        "gpu_count": "gpuCount",
        "gpu_type": "gpuType",
        "version": "version",
    }

    def __init__(
        self,
        engine="",
        gpu_count=0,
        gpu_type="",
        version="",
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1ServiceMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._engine = None
        self._gpu_count = None
        self._gpu_type = None
        self._version = None
        self.discriminator = None

        self.engine = engine
        self.gpu_count = gpu_count
        self.gpu_type = gpu_type
        self.version = version

    @property
    def engine(self):
        """Gets the engine of this V1beta1ServiceMetadata.  # noqa: E501

        Engine specifies the backend model server engine. Supported values: \"vLLM\", \"SGLang\", \"TGI\".  # noqa: E501

        :return: The engine of this V1beta1ServiceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this V1beta1ServiceMetadata.

        Engine specifies the backend model server engine. Supported values: \"vLLM\", \"SGLang\", \"TGI\".  # noqa: E501

        :param engine: The engine of this V1beta1ServiceMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and engine is None:  # noqa: E501
            raise ValueError("Invalid value for `engine`, must not be `None`")  # noqa: E501

        self._engine = engine

    @property
    def gpu_count(self):
        """Gets the gpu_count of this V1beta1ServiceMetadata.  # noqa: E501

        GpuCount indicates the number of GPU cards available on the model server.  # noqa: E501

        :return: The gpu_count of this V1beta1ServiceMetadata.  # noqa: E501
        :rtype: int
        """
        return self._gpu_count

    @gpu_count.setter
    def gpu_count(self, gpu_count):
        """Sets the gpu_count of this V1beta1ServiceMetadata.

        GpuCount indicates the number of GPU cards available on the model server.  # noqa: E501

        :param gpu_count: The gpu_count of this V1beta1ServiceMetadata.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and gpu_count is None:  # noqa: E501
            raise ValueError("Invalid value for `gpu_count`, must not be `None`")  # noqa: E501

        self._gpu_count = gpu_count

    @property
    def gpu_type(self):
        """Gets the gpu_type of this V1beta1ServiceMetadata.  # noqa: E501

        GpuType specifies the type of GPU used by the model server. Supported values: \"H100\", \"A100\", \"MI300\", \"A10\".  # noqa: E501

        :return: The gpu_type of this V1beta1ServiceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._gpu_type

    @gpu_type.setter
    def gpu_type(self, gpu_type):
        """Sets the gpu_type of this V1beta1ServiceMetadata.

        GpuType specifies the type of GPU used by the model server. Supported values: \"H100\", \"A100\", \"MI300\", \"A10\".  # noqa: E501

        :param gpu_type: The gpu_type of this V1beta1ServiceMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gpu_type is None:  # noqa: E501
            raise ValueError("Invalid value for `gpu_type`, must not be `None`")  # noqa: E501

        self._gpu_type = gpu_type

    @property
    def version(self):
        """Gets the version of this V1beta1ServiceMetadata.  # noqa: E501

        Version specifies the version of the model server (e.g., \"0.5.3\").  # noqa: E501

        :return: The version of this V1beta1ServiceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1beta1ServiceMetadata.

        Version specifies the version of the model server (e.g., \"0.5.3\").  # noqa: E501

        :param version: The version of this V1beta1ServiceMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ServiceMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1ServiceMetadata):
            return True

        return self.to_dict() != other.to_dict()
