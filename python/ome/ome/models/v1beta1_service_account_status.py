# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1ServiceAccountStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "api_key": "V1beta1APIKeySpec",
        "conditions": "list[V1Condition]",
        "creation_time": "V1Time",
        "service_account_id": "str",
    }

    attribute_map = {
        "api_key": "apiKey",
        "conditions": "conditions",
        "creation_time": "creationTime",
        "service_account_id": "serviceAccountId",
    }

    def __init__(
        self,
        api_key=None,
        conditions=None,
        creation_time=None,
        service_account_id=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1ServiceAccountStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._conditions = None
        self._creation_time = None
        self._service_account_id = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if conditions is not None:
            self.conditions = conditions
        if creation_time is not None:
            self.creation_time = creation_time
        if service_account_id is not None:
            self.service_account_id = service_account_id

    @property
    def api_key(self):
        """Gets the api_key of this V1beta1ServiceAccountStatus.  # noqa: E501


        :return: The api_key of this V1beta1ServiceAccountStatus.  # noqa: E501
        :rtype: V1beta1APIKeySpec
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this V1beta1ServiceAccountStatus.


        :param api_key: The api_key of this V1beta1ServiceAccountStatus.  # noqa: E501
        :type: V1beta1APIKeySpec
        """

        self._api_key = api_key

    @property
    def conditions(self):
        """Gets the conditions of this V1beta1ServiceAccountStatus.  # noqa: E501

        Conditions represent the latest available observations of an object's state  # noqa: E501

        :return: The conditions of this V1beta1ServiceAccountStatus.  # noqa: E501
        :rtype: list[V1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this V1beta1ServiceAccountStatus.

        Conditions represent the latest available observations of an object's state  # noqa: E501

        :param conditions: The conditions of this V1beta1ServiceAccountStatus.  # noqa: E501
        :type: list[V1Condition]
        """

        self._conditions = conditions

    @property
    def creation_time(self):
        """Gets the creation_time of this V1beta1ServiceAccountStatus.  # noqa: E501


        :return: The creation_time of this V1beta1ServiceAccountStatus.  # noqa: E501
        :rtype: V1Time
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this V1beta1ServiceAccountStatus.


        :param creation_time: The creation_time of this V1beta1ServiceAccountStatus.  # noqa: E501
        :type: V1Time
        """

        self._creation_time = creation_time

    @property
    def service_account_id(self):
        """Gets the service_account_id of this V1beta1ServiceAccountStatus.  # noqa: E501

        ServiceAccountId is the platform-specific service account ID  # noqa: E501

        :return: The service_account_id of this V1beta1ServiceAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_account_id

    @service_account_id.setter
    def service_account_id(self, service_account_id):
        """Sets the service_account_id of this V1beta1ServiceAccountStatus.

        ServiceAccountId is the platform-specific service account ID  # noqa: E501

        :param service_account_id: The service_account_id of this V1beta1ServiceAccountStatus.  # noqa: E501
        :type: str
        """

        self._service_account_id = service_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ServiceAccountStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1ServiceAccountStatus):
            return True

        return self.to_dict() != other.to_dict()
