# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1ModelExtensionSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "compartment_id": "str",
        "disabled": "bool",
        "display_name": "str",
        "vendor": "str",
        "version": "str",
    }

    attribute_map = {
        "compartment_id": "compartmentID",
        "disabled": "disabled",
        "display_name": "displayName",
        "vendor": "vendor",
        "version": "version",
    }

    def __init__(
        self,
        compartment_id=None,
        disabled=None,
        display_name=None,
        vendor=None,
        version=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1ModelExtensionSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._compartment_id = None
        self._disabled = None
        self._display_name = None
        self._vendor = None
        self._version = None
        self.discriminator = None

        if compartment_id is not None:
            self.compartment_id = compartment_id
        if disabled is not None:
            self.disabled = disabled
        if display_name is not None:
            self.display_name = display_name
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version

    @property
    def compartment_id(self):
        """Gets the compartment_id of this V1beta1ModelExtensionSpec.  # noqa: E501

        CompartmentID is the compartment ID of the model  # noqa: E501

        :return: The compartment_id of this V1beta1ModelExtensionSpec.  # noqa: E501
        :rtype: str
        """
        return self._compartment_id

    @compartment_id.setter
    def compartment_id(self, compartment_id):
        """Sets the compartment_id of this V1beta1ModelExtensionSpec.

        CompartmentID is the compartment ID of the model  # noqa: E501

        :param compartment_id: The compartment_id of this V1beta1ModelExtensionSpec.  # noqa: E501
        :type: str
        """

        self._compartment_id = compartment_id

    @property
    def disabled(self):
        """Gets the disabled of this V1beta1ModelExtensionSpec.  # noqa: E501

        Whether the model is enabled or not  # noqa: E501

        :return: The disabled of this V1beta1ModelExtensionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1beta1ModelExtensionSpec.

        Whether the model is enabled or not  # noqa: E501

        :param disabled: The disabled of this V1beta1ModelExtensionSpec.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this V1beta1ModelExtensionSpec.  # noqa: E501

        DisplayName is the user-friendly name of the model  # noqa: E501

        :return: The display_name of this V1beta1ModelExtensionSpec.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1beta1ModelExtensionSpec.

        DisplayName is the user-friendly name of the model  # noqa: E501

        :param display_name: The display_name of this V1beta1ModelExtensionSpec.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def vendor(self):
        """Gets the vendor of this V1beta1ModelExtensionSpec.  # noqa: E501

        Vendor of the model, e.g., \"NVIDIA\", \"Meta\", \"HuggingFace\"  # noqa: E501

        :return: The vendor of this V1beta1ModelExtensionSpec.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this V1beta1ModelExtensionSpec.

        Vendor of the model, e.g., \"NVIDIA\", \"Meta\", \"HuggingFace\"  # noqa: E501

        :param vendor: The vendor of this V1beta1ModelExtensionSpec.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this V1beta1ModelExtensionSpec.  # noqa: E501


        :return: The version of this V1beta1ModelExtensionSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1beta1ModelExtensionSpec.


        :param version: The version of this V1beta1ModelExtensionSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ModelExtensionSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1ModelExtensionSpec):
            return True

        return self.to_dict() != other.to_dict()
