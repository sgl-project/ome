# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1ModelStatusSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "lifecycle": "str",
        "nodes_failed": "list[str]",
        "nodes_ready": "list[str]",
        "state": "str",
    }

    attribute_map = {
        "lifecycle": "lifecycle",
        "nodes_failed": "nodesFailed",
        "nodes_ready": "nodesReady",
        "state": "state",
    }

    def __init__(
        self,
        lifecycle=None,
        nodes_failed=None,
        nodes_ready=None,
        state="",
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1ModelStatusSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lifecycle = None
        self._nodes_failed = None
        self._nodes_ready = None
        self._state = None
        self.discriminator = None

        if lifecycle is not None:
            self.lifecycle = lifecycle
        if nodes_failed is not None:
            self.nodes_failed = nodes_failed
        if nodes_ready is not None:
            self.nodes_ready = nodes_ready
        self.state = state

    @property
    def lifecycle(self):
        """Gets the lifecycle of this V1beta1ModelStatusSpec.  # noqa: E501

        LifeCycle is an enum of Deprecated, Experiment, Public, Internal  # noqa: E501

        :return: The lifecycle of this V1beta1ModelStatusSpec.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this V1beta1ModelStatusSpec.

        LifeCycle is an enum of Deprecated, Experiment, Public, Internal  # noqa: E501

        :param lifecycle: The lifecycle of this V1beta1ModelStatusSpec.  # noqa: E501
        :type: str
        """

        self._lifecycle = lifecycle

    @property
    def nodes_failed(self):
        """Gets the nodes_failed of this V1beta1ModelStatusSpec.  # noqa: E501


        :return: The nodes_failed of this V1beta1ModelStatusSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes_failed

    @nodes_failed.setter
    def nodes_failed(self, nodes_failed):
        """Sets the nodes_failed of this V1beta1ModelStatusSpec.


        :param nodes_failed: The nodes_failed of this V1beta1ModelStatusSpec.  # noqa: E501
        :type: list[str]
        """

        self._nodes_failed = nodes_failed

    @property
    def nodes_ready(self):
        """Gets the nodes_ready of this V1beta1ModelStatusSpec.  # noqa: E501


        :return: The nodes_ready of this V1beta1ModelStatusSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes_ready

    @nodes_ready.setter
    def nodes_ready(self, nodes_ready):
        """Sets the nodes_ready of this V1beta1ModelStatusSpec.


        :param nodes_ready: The nodes_ready of this V1beta1ModelStatusSpec.  # noqa: E501
        :type: list[str]
        """

        self._nodes_ready = nodes_ready

    @property
    def state(self):
        """Gets the state of this V1beta1ModelStatusSpec.  # noqa: E501

        Status of the model weight  # noqa: E501

        :return: The state of this V1beta1ModelStatusSpec.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1beta1ModelStatusSpec.

        Status of the model weight  # noqa: E501

        :param state: The state of this V1beta1ModelStatusSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ModelStatusSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1ModelStatusSpec):
            return True

        return self.to_dict() != other.to_dict()
