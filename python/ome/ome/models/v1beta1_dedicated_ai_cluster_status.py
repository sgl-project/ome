# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1DedicatedAIClusterStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "allocated_gpu": "int",
        "available_gpu": "int",
        "conditions": "list[V1Condition]",
        "dac_lifecycle_state": "str",
        "lifecycle_detail": "str",
    }

    attribute_map = {
        "allocated_gpu": "allocatedGpu",
        "available_gpu": "availableGpu",
        "conditions": "conditions",
        "dac_lifecycle_state": "dacLifecycleState",
        "lifecycle_detail": "lifecycleDetail",
    }

    def __init__(
        self,
        allocated_gpu=None,
        available_gpu=None,
        conditions=None,
        dac_lifecycle_state=None,
        lifecycle_detail=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1DedicatedAIClusterStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allocated_gpu = None
        self._available_gpu = None
        self._conditions = None
        self._dac_lifecycle_state = None
        self._lifecycle_detail = None
        self.discriminator = None

        if allocated_gpu is not None:
            self.allocated_gpu = allocated_gpu
        if available_gpu is not None:
            self.available_gpu = available_gpu
        if conditions is not None:
            self.conditions = conditions
        if dac_lifecycle_state is not None:
            self.dac_lifecycle_state = dac_lifecycle_state
        if lifecycle_detail is not None:
            self.lifecycle_detail = lifecycle_detail

    @property
    def allocated_gpu(self):
        """Gets the allocated_gpu of this V1beta1DedicatedAIClusterStatus.  # noqa: E501

        The number of GPU already allocated  # noqa: E501

        :return: The allocated_gpu of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._allocated_gpu

    @allocated_gpu.setter
    def allocated_gpu(self, allocated_gpu):
        """Sets the allocated_gpu of this V1beta1DedicatedAIClusterStatus.

        The number of GPU already allocated  # noqa: E501

        :param allocated_gpu: The allocated_gpu of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :type: int
        """

        self._allocated_gpu = allocated_gpu

    @property
    def available_gpu(self):
        """Gets the available_gpu of this V1beta1DedicatedAIClusterStatus.  # noqa: E501

        The available number of GPU for allocation  # noqa: E501

        :return: The available_gpu of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._available_gpu

    @available_gpu.setter
    def available_gpu(self, available_gpu):
        """Sets the available_gpu of this V1beta1DedicatedAIClusterStatus.

        The available number of GPU for allocation  # noqa: E501

        :param available_gpu: The available_gpu of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :type: int
        """

        self._available_gpu = available_gpu

    @property
    def conditions(self):
        """Gets the conditions of this V1beta1DedicatedAIClusterStatus.  # noqa: E501

        Conditions reflects the current state of the cluster.  # noqa: E501

        :return: The conditions of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :rtype: list[V1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this V1beta1DedicatedAIClusterStatus.

        Conditions reflects the current state of the cluster.  # noqa: E501

        :param conditions: The conditions of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :type: list[V1Condition]
        """

        self._conditions = conditions

    @property
    def dac_lifecycle_state(self):
        """Gets the dac_lifecycle_state of this V1beta1DedicatedAIClusterStatus.  # noqa: E501

        DacLifecycleState indicates the current phase of the Dedicated AI Cluster (e.g., \"active\", \"creating\", \"Failed\" etc.).  # noqa: E501

        :return: The dac_lifecycle_state of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._dac_lifecycle_state

    @dac_lifecycle_state.setter
    def dac_lifecycle_state(self, dac_lifecycle_state):
        """Sets the dac_lifecycle_state of this V1beta1DedicatedAIClusterStatus.

        DacLifecycleState indicates the current phase of the Dedicated AI Cluster (e.g., \"active\", \"creating\", \"Failed\" etc.).  # noqa: E501

        :param dac_lifecycle_state: The dac_lifecycle_state of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :type: str
        """

        self._dac_lifecycle_state = dac_lifecycle_state

    @property
    def lifecycle_detail(self):
        """Gets the lifecycle_detail of this V1beta1DedicatedAIClusterStatus.  # noqa: E501

        A message describing the current state in more detail that can provide actionable information.  # noqa: E501

        :return: The lifecycle_detail of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle_detail

    @lifecycle_detail.setter
    def lifecycle_detail(self, lifecycle_detail):
        """Sets the lifecycle_detail of this V1beta1DedicatedAIClusterStatus.

        A message describing the current state in more detail that can provide actionable information.  # noqa: E501

        :param lifecycle_detail: The lifecycle_detail of this V1beta1DedicatedAIClusterStatus.  # noqa: E501
        :type: str
        """

        self._lifecycle_detail = lifecycle_detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1DedicatedAIClusterStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1DedicatedAIClusterStatus):
            return True

        return self.to_dict() != other.to_dict()
