# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1StorageSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "key": "str",
        "node_affinity": "V1NodeAffinity",
        "node_selector": "dict(str, str)",
        "parameters": "dict(str, str)",
        "path": "str",
        "schema_path": "str",
        "storage_uri": "str",
    }

    attribute_map = {
        "key": "key",
        "node_affinity": "nodeAffinity",
        "node_selector": "nodeSelector",
        "parameters": "parameters",
        "path": "path",
        "schema_path": "schemaPath",
        "storage_uri": "storageUri",
    }

    def __init__(
        self,
        key=None,
        node_affinity=None,
        node_selector=None,
        parameters=None,
        path=None,
        schema_path=None,
        storage_uri=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1StorageSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._node_affinity = None
        self._node_selector = None
        self._parameters = None
        self._path = None
        self._schema_path = None
        self._storage_uri = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if node_affinity is not None:
            self.node_affinity = node_affinity
        if node_selector is not None:
            self.node_selector = node_selector
        if parameters is not None:
            self.parameters = parameters
        if path is not None:
            self.path = path
        if schema_path is not None:
            self.schema_path = schema_path
        self.storage_uri = storage_uri

    @property
    def key(self):
        """Gets the key of this V1beta1StorageSpec.  # noqa: E501

        The Storage Key in the secret for this model.  # noqa: E501

        :return: The key of this V1beta1StorageSpec.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this V1beta1StorageSpec.

        The Storage Key in the secret for this model.  # noqa: E501

        :param key: The key of this V1beta1StorageSpec.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def node_affinity(self):
        """Gets the node_affinity of this V1beta1StorageSpec.  # noqa: E501


        :return: The node_affinity of this V1beta1StorageSpec.  # noqa: E501
        :rtype: V1NodeAffinity
        """
        return self._node_affinity

    @node_affinity.setter
    def node_affinity(self, node_affinity):
        """Sets the node_affinity of this V1beta1StorageSpec.


        :param node_affinity: The node_affinity of this V1beta1StorageSpec.  # noqa: E501
        :type: V1NodeAffinity
        """

        self._node_affinity = node_affinity

    @property
    def node_selector(self):
        """Gets the node_selector of this V1beta1StorageSpec.  # noqa: E501

        NodeSelector is a selector which must be true for the model to fit on a node. Selector which must match a node's labels for the model to be downloaded on that node.  # noqa: E501

        :return: The node_selector of this V1beta1StorageSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this V1beta1StorageSpec.

        NodeSelector is a selector which must be true for the model to fit on a node. Selector which must match a node's labels for the model to be downloaded on that node.  # noqa: E501

        :param node_selector: The node_selector of this V1beta1StorageSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def parameters(self):
        """Gets the parameters of this V1beta1StorageSpec.  # noqa: E501

        Parameters to override the default storage credentials and config.  # noqa: E501

        :return: The parameters of this V1beta1StorageSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this V1beta1StorageSpec.

        Parameters to override the default storage credentials and config.  # noqa: E501

        :param parameters: The parameters of this V1beta1StorageSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def path(self):
        """Gets the path of this V1beta1StorageSpec.  # noqa: E501

        The path to the model where it will be downloaded. Default is /mnt/models/vendor/model-name  # noqa: E501

        :return: The path of this V1beta1StorageSpec.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this V1beta1StorageSpec.

        The path to the model where it will be downloaded. Default is /mnt/models/vendor/model-name  # noqa: E501

        :param path: The path of this V1beta1StorageSpec.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def schema_path(self):
        """Gets the schema_path of this V1beta1StorageSpec.  # noqa: E501

        The path to the model schema file in the storage.  # noqa: E501

        :return: The schema_path of this V1beta1StorageSpec.  # noqa: E501
        :rtype: str
        """
        return self._schema_path

    @schema_path.setter
    def schema_path(self, schema_path):
        """Sets the schema_path of this V1beta1StorageSpec.

        The path to the model schema file in the storage.  # noqa: E501

        :param schema_path: The schema_path of this V1beta1StorageSpec.  # noqa: E501
        :type: str
        """

        self._schema_path = schema_path

    @property
    def storage_uri(self):
        """Gets the storage_uri of this V1beta1StorageSpec.  # noqa: E501

        The path to the model object in storage. Supported storage types: - OCI object storage (e.g., oci://n/{namespace}/b/{bucket}/o/{object_path}) - PVC storage (e.g., pvc://{pvc-name}/{sub-path}) - Vendor storage (e.g., vendor://{vendor-name}/{resource-type}/{resource-path})  # noqa: E501

        :return: The storage_uri of this V1beta1StorageSpec.  # noqa: E501
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this V1beta1StorageSpec.

        The path to the model object in storage. Supported storage types: - OCI object storage (e.g., oci://n/{namespace}/b/{bucket}/o/{object_path}) - PVC storage (e.g., pvc://{pvc-name}/{sub-path}) - Vendor storage (e.g., vendor://{vendor-name}/{resource-type}/{resource-path})  # noqa: E501

        :param storage_uri: The storage_uri of this V1beta1StorageSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and storage_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `storage_uri`, must not be `None`")  # noqa: E501

        self._storage_uri = storage_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1StorageSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1StorageSpec):
            return True

        return self.to_dict() != other.to_dict()
