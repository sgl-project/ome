# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1BenchmarkJobSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "additional_request_params": "dict(str, str)",
        "dataset": "V1beta1StorageSpec",
        "endpoint": "V1beta1EndpointSpec",
        "hugging_face_secret_reference": "V1beta1HuggingFaceSecretReference",
        "max_requests_per_iteration": "int",
        "max_time_per_iteration": "int",
        "num_concurrency": "list[int]",
        "output_location": "V1beta1StorageSpec",
        "pod_override": "V1beta1PodOverride",
        "result_folder_name": "str",
        "service_metadata": "V1beta1ServiceMetadata",
        "task": "str",
        "traffic_scenarios": "list[str]",
    }

    attribute_map = {
        "additional_request_params": "additionalRequestParams",
        "dataset": "dataset",
        "endpoint": "endpoint",
        "hugging_face_secret_reference": "huggingFaceSecretReference",
        "max_requests_per_iteration": "maxRequestsPerIteration",
        "max_time_per_iteration": "maxTimePerIteration",
        "num_concurrency": "numConcurrency",
        "output_location": "outputLocation",
        "pod_override": "podOverride",
        "result_folder_name": "resultFolderName",
        "service_metadata": "serviceMetadata",
        "task": "task",
        "traffic_scenarios": "trafficScenarios",
    }

    def __init__(
        self,
        additional_request_params=None,
        dataset=None,
        endpoint=None,
        hugging_face_secret_reference=None,
        max_requests_per_iteration=None,
        max_time_per_iteration=None,
        num_concurrency=None,
        output_location=None,
        pod_override=None,
        result_folder_name=None,
        service_metadata=None,
        task="",
        traffic_scenarios=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1BenchmarkJobSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_request_params = None
        self._dataset = None
        self._endpoint = None
        self._hugging_face_secret_reference = None
        self._max_requests_per_iteration = None
        self._max_time_per_iteration = None
        self._num_concurrency = None
        self._output_location = None
        self._pod_override = None
        self._result_folder_name = None
        self._service_metadata = None
        self._task = None
        self._traffic_scenarios = None
        self.discriminator = None

        if additional_request_params is not None:
            self.additional_request_params = additional_request_params
        if dataset is not None:
            self.dataset = dataset
        self.endpoint = endpoint
        if hugging_face_secret_reference is not None:
            self.hugging_face_secret_reference = hugging_face_secret_reference
        self.max_requests_per_iteration = max_requests_per_iteration
        self.max_time_per_iteration = max_time_per_iteration
        if num_concurrency is not None:
            self.num_concurrency = num_concurrency
        self.output_location = output_location
        if pod_override is not None:
            self.pod_override = pod_override
        if result_folder_name is not None:
            self.result_folder_name = result_folder_name
        if service_metadata is not None:
            self.service_metadata = service_metadata
        self.task = task
        if traffic_scenarios is not None:
            self.traffic_scenarios = traffic_scenarios

    @property
    def additional_request_params(self):
        """Gets the additional_request_params of this V1beta1BenchmarkJobSpec.  # noqa: E501

        AdditionalRequestParams contains additional request parameters as a map.  # noqa: E501

        :return: The additional_request_params of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_request_params

    @additional_request_params.setter
    def additional_request_params(self, additional_request_params):
        """Sets the additional_request_params of this V1beta1BenchmarkJobSpec.

        AdditionalRequestParams contains additional request parameters as a map.  # noqa: E501

        :param additional_request_params: The additional_request_params of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_request_params = additional_request_params

    @property
    def dataset(self):
        """Gets the dataset of this V1beta1BenchmarkJobSpec.  # noqa: E501


        :return: The dataset of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: V1beta1StorageSpec
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this V1beta1BenchmarkJobSpec.


        :param dataset: The dataset of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: V1beta1StorageSpec
        """

        self._dataset = dataset

    @property
    def endpoint(self):
        """Gets the endpoint of this V1beta1BenchmarkJobSpec.  # noqa: E501


        :return: The endpoint of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: V1beta1EndpointSpec
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this V1beta1BenchmarkJobSpec.


        :param endpoint: The endpoint of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: V1beta1EndpointSpec
        """
        if self.local_vars_configuration.client_side_validation and endpoint is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def hugging_face_secret_reference(self):
        """Gets the hugging_face_secret_reference of this V1beta1BenchmarkJobSpec.  # noqa: E501


        :return: The hugging_face_secret_reference of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: V1beta1HuggingFaceSecretReference
        """
        return self._hugging_face_secret_reference

    @hugging_face_secret_reference.setter
    def hugging_face_secret_reference(self, hugging_face_secret_reference):
        """Sets the hugging_face_secret_reference of this V1beta1BenchmarkJobSpec.


        :param hugging_face_secret_reference: The hugging_face_secret_reference of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: V1beta1HuggingFaceSecretReference
        """

        self._hugging_face_secret_reference = hugging_face_secret_reference

    @property
    def max_requests_per_iteration(self):
        """Gets the max_requests_per_iteration of this V1beta1BenchmarkJobSpec.  # noqa: E501

        MaxRequestsPerIteration specifies the maximum number of requests for a single iteration. Each iteration runs for a specific combination of TrafficScenarios and NumConcurrency.  # noqa: E501

        :return: The max_requests_per_iteration of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_requests_per_iteration

    @max_requests_per_iteration.setter
    def max_requests_per_iteration(self, max_requests_per_iteration):
        """Sets the max_requests_per_iteration of this V1beta1BenchmarkJobSpec.

        MaxRequestsPerIteration specifies the maximum number of requests for a single iteration. Each iteration runs for a specific combination of TrafficScenarios and NumConcurrency.  # noqa: E501

        :param max_requests_per_iteration: The max_requests_per_iteration of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and max_requests_per_iteration is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `max_requests_per_iteration`, must not be `None`"
            )  # noqa: E501

        self._max_requests_per_iteration = max_requests_per_iteration

    @property
    def max_time_per_iteration(self):
        """Gets the max_time_per_iteration of this V1beta1BenchmarkJobSpec.  # noqa: E501

        MaxTimePerIteration specifies the maximum time (in minutes) for a single iteration. Each iteration runs for a specific combination of TrafficScenarios and NumConcurrency.  # noqa: E501

        :return: The max_time_per_iteration of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_time_per_iteration

    @max_time_per_iteration.setter
    def max_time_per_iteration(self, max_time_per_iteration):
        """Sets the max_time_per_iteration of this V1beta1BenchmarkJobSpec.

        MaxTimePerIteration specifies the maximum time (in minutes) for a single iteration. Each iteration runs for a specific combination of TrafficScenarios and NumConcurrency.  # noqa: E501

        :param max_time_per_iteration: The max_time_per_iteration of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and max_time_per_iteration is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `max_time_per_iteration`, must not be `None`"
            )  # noqa: E501

        self._max_time_per_iteration = max_time_per_iteration

    @property
    def num_concurrency(self):
        """Gets the num_concurrency of this V1beta1BenchmarkJobSpec.  # noqa: E501

        NumConcurrency defines a list of concurrency levels to test during the benchmark. If not provided, defaults will be assigned via genai-bench.  # noqa: E501

        :return: The num_concurrency of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: list[int]
        """
        return self._num_concurrency

    @num_concurrency.setter
    def num_concurrency(self, num_concurrency):
        """Sets the num_concurrency of this V1beta1BenchmarkJobSpec.

        NumConcurrency defines a list of concurrency levels to test during the benchmark. If not provided, defaults will be assigned via genai-bench.  # noqa: E501

        :param num_concurrency: The num_concurrency of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: list[int]
        """

        self._num_concurrency = num_concurrency

    @property
    def output_location(self):
        """Gets the output_location of this V1beta1BenchmarkJobSpec.  # noqa: E501


        :return: The output_location of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: V1beta1StorageSpec
        """
        return self._output_location

    @output_location.setter
    def output_location(self, output_location):
        """Sets the output_location of this V1beta1BenchmarkJobSpec.


        :param output_location: The output_location of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: V1beta1StorageSpec
        """
        if (
            self.local_vars_configuration.client_side_validation
            and output_location is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `output_location`, must not be `None`")  # noqa: E501

        self._output_location = output_location

    @property
    def pod_override(self):
        """Gets the pod_override of this V1beta1BenchmarkJobSpec.  # noqa: E501


        :return: The pod_override of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: V1beta1PodOverride
        """
        return self._pod_override

    @pod_override.setter
    def pod_override(self, pod_override):
        """Sets the pod_override of this V1beta1BenchmarkJobSpec.


        :param pod_override: The pod_override of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: V1beta1PodOverride
        """

        self._pod_override = pod_override

    @property
    def result_folder_name(self):
        """Gets the result_folder_name of this V1beta1BenchmarkJobSpec.  # noqa: E501

        ResultFolderName specifies the name of the folder that stores the benchmark result. A default name will be assigned if not specified.  # noqa: E501

        :return: The result_folder_name of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: str
        """
        return self._result_folder_name

    @result_folder_name.setter
    def result_folder_name(self, result_folder_name):
        """Sets the result_folder_name of this V1beta1BenchmarkJobSpec.

        ResultFolderName specifies the name of the folder that stores the benchmark result. A default name will be assigned if not specified.  # noqa: E501

        :param result_folder_name: The result_folder_name of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: str
        """

        self._result_folder_name = result_folder_name

    @property
    def service_metadata(self):
        """Gets the service_metadata of this V1beta1BenchmarkJobSpec.  # noqa: E501


        :return: The service_metadata of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: V1beta1ServiceMetadata
        """
        return self._service_metadata

    @service_metadata.setter
    def service_metadata(self, service_metadata):
        """Sets the service_metadata of this V1beta1BenchmarkJobSpec.


        :param service_metadata: The service_metadata of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: V1beta1ServiceMetadata
        """

        self._service_metadata = service_metadata

    @property
    def task(self):
        """Gets the task of this V1beta1BenchmarkJobSpec.  # noqa: E501

        Task specifies the task to benchmark, pattern: <input-modality>-to-<output-modality> (e.g., \"text-to-text\", \"image-to-text\").  # noqa: E501

        :return: The task of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this V1beta1BenchmarkJobSpec.

        Task specifies the task to benchmark, pattern: <input-modality>-to-<output-modality> (e.g., \"text-to-text\", \"image-to-text\").  # noqa: E501

        :param task: The task of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task is None:  # noqa: E501
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def traffic_scenarios(self):
        """Gets the traffic_scenarios of this V1beta1BenchmarkJobSpec.  # noqa: E501

        TrafficScenarios contains a list of traffic scenarios to simulate during the benchmark. If not provided, defaults will be assigned via genai-bench.  # noqa: E501

        :return: The traffic_scenarios of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._traffic_scenarios

    @traffic_scenarios.setter
    def traffic_scenarios(self, traffic_scenarios):
        """Sets the traffic_scenarios of this V1beta1BenchmarkJobSpec.

        TrafficScenarios contains a list of traffic scenarios to simulate during the benchmark. If not provided, defaults will be assigned via genai-bench.  # noqa: E501

        :param traffic_scenarios: The traffic_scenarios of this V1beta1BenchmarkJobSpec.  # noqa: E501
        :type: list[str]
        """

        self._traffic_scenarios = traffic_scenarios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1BenchmarkJobSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1BenchmarkJobSpec):
            return True

        return self.to_dict() != other.to_dict()
