# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1BenchmarkJobStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "completion_time": "V1Time",
        "details": "str",
        "failure_message": "str",
        "last_reconcile_time": "V1Time",
        "start_time": "V1Time",
        "state": "str",
    }

    attribute_map = {
        "completion_time": "completionTime",
        "details": "details",
        "failure_message": "failureMessage",
        "last_reconcile_time": "lastReconcileTime",
        "start_time": "startTime",
        "state": "state",
    }

    def __init__(
        self,
        completion_time=None,
        details=None,
        failure_message=None,
        last_reconcile_time=None,
        start_time=None,
        state="",
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1BenchmarkJobStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completion_time = None
        self._details = None
        self._failure_message = None
        self._last_reconcile_time = None
        self._start_time = None
        self._state = None
        self.discriminator = None

        if completion_time is not None:
            self.completion_time = completion_time
        if details is not None:
            self.details = details
        if failure_message is not None:
            self.failure_message = failure_message
        if last_reconcile_time is not None:
            self.last_reconcile_time = last_reconcile_time
        if start_time is not None:
            self.start_time = start_time
        self.state = state

    @property
    def completion_time(self):
        """Gets the completion_time of this V1beta1BenchmarkJobStatus.  # noqa: E501


        :return: The completion_time of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :rtype: V1Time
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this V1beta1BenchmarkJobStatus.


        :param completion_time: The completion_time of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :type: V1Time
        """

        self._completion_time = completion_time

    @property
    def details(self):
        """Gets the details of this V1beta1BenchmarkJobStatus.  # noqa: E501

        Details provide additional information or metadata about the benchmark job.  # noqa: E501

        :return: The details of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this V1beta1BenchmarkJobStatus.

        Details provide additional information or metadata about the benchmark job.  # noqa: E501

        :param details: The details of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def failure_message(self):
        """Gets the failure_message of this V1beta1BenchmarkJobStatus.  # noqa: E501

        FailureMessage contains any error messages if the benchmark job failed.  # noqa: E501

        :return: The failure_message of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this V1beta1BenchmarkJobStatus.

        FailureMessage contains any error messages if the benchmark job failed.  # noqa: E501

        :param failure_message: The failure_message of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def last_reconcile_time(self):
        """Gets the last_reconcile_time of this V1beta1BenchmarkJobStatus.  # noqa: E501


        :return: The last_reconcile_time of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :rtype: V1Time
        """
        return self._last_reconcile_time

    @last_reconcile_time.setter
    def last_reconcile_time(self, last_reconcile_time):
        """Sets the last_reconcile_time of this V1beta1BenchmarkJobStatus.


        :param last_reconcile_time: The last_reconcile_time of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :type: V1Time
        """

        self._last_reconcile_time = last_reconcile_time

    @property
    def start_time(self):
        """Gets the start_time of this V1beta1BenchmarkJobStatus.  # noqa: E501


        :return: The start_time of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :rtype: V1Time
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1beta1BenchmarkJobStatus.


        :param start_time: The start_time of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :type: V1Time
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this V1beta1BenchmarkJobStatus.  # noqa: E501

        State represents the current state of the benchmark job: \"Pending\", \"Running\", \"Completed\", \"Failed\".  # noqa: E501

        :return: The state of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1beta1BenchmarkJobStatus.

        State represents the current state of the benchmark job: \"Pending\", \"Running\", \"Completed\", \"Failed\".  # noqa: E501

        :param state: The state of this V1beta1BenchmarkJobStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1BenchmarkJobStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1BenchmarkJobStatus):
            return True

        return self.to_dict() != other.to_dict()
