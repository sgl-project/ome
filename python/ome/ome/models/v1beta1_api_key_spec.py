# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1APIKeySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "api_key_id": "str",
        "api_key_secret_ref": "V1beta1SecretReference",
        "name": "str",
    }

    attribute_map = {
        "api_key_id": "apiKeyId",
        "api_key_secret_ref": "apiKeySecretRef",
        "name": "name",
    }

    def __init__(
        self,
        api_key_id=None,
        api_key_secret_ref=None,
        name=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1APIKeySpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key_id = None
        self._api_key_secret_ref = None
        self._name = None
        self.discriminator = None

        self.api_key_id = api_key_id
        self.api_key_secret_ref = api_key_secret_ref
        self.name = name

    @property
    def api_key_id(self):
        """Gets the api_key_id of this V1beta1APIKeySpec.  # noqa: E501

        APIKeyId is the platform-specific API key ID  # noqa: E501

        :return: The api_key_id of this V1beta1APIKeySpec.  # noqa: E501
        :rtype: str
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this V1beta1APIKeySpec.

        APIKeyId is the platform-specific API key ID  # noqa: E501

        :param api_key_id: The api_key_id of this V1beta1APIKeySpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and api_key_id is None:  # noqa: E501
            raise ValueError("Invalid value for `api_key_id`, must not be `None`")  # noqa: E501

        self._api_key_id = api_key_id

    @property
    def api_key_secret_ref(self):
        """Gets the api_key_secret_ref of this V1beta1APIKeySpec.  # noqa: E501


        :return: The api_key_secret_ref of this V1beta1APIKeySpec.  # noqa: E501
        :rtype: V1beta1SecretReference
        """
        return self._api_key_secret_ref

    @api_key_secret_ref.setter
    def api_key_secret_ref(self, api_key_secret_ref):
        """Sets the api_key_secret_ref of this V1beta1APIKeySpec.


        :param api_key_secret_ref: The api_key_secret_ref of this V1beta1APIKeySpec.  # noqa: E501
        :type: V1beta1SecretReference
        """
        if (
            self.local_vars_configuration.client_side_validation
            and api_key_secret_ref is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `api_key_secret_ref`, must not be `None`"
            )  # noqa: E501

        self._api_key_secret_ref = api_key_secret_ref

    @property
    def name(self):
        """Gets the name of this V1beta1APIKeySpec.  # noqa: E501

        Name is the API key name  # noqa: E501

        :return: The name of this V1beta1APIKeySpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1beta1APIKeySpec.

        Name is the API key name  # noqa: E501

        :param name: The name of this V1beta1APIKeySpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1APIKeySpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1APIKeySpec):
            return True

        return self.to_dict() != other.to_dict()
