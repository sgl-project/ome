# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1MPIMLPolicyConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "mpi_implementation": "str",
        "num_proc_per_node": "int",
        "run_launcher_as_node": "bool",
        "ssh_auth_mount_path": "str",
    }

    attribute_map = {
        "mpi_implementation": "mpiImplementation",
        "num_proc_per_node": "numProcPerNode",
        "run_launcher_as_node": "runLauncherAsNode",
        "ssh_auth_mount_path": "sshAuthMountPath",
    }

    def __init__(
        self,
        mpi_implementation=None,
        num_proc_per_node=None,
        run_launcher_as_node=None,
        ssh_auth_mount_path=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1MPIMLPolicyConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mpi_implementation = None
        self._num_proc_per_node = None
        self._run_launcher_as_node = None
        self._ssh_auth_mount_path = None
        self.discriminator = None

        if mpi_implementation is not None:
            self.mpi_implementation = mpi_implementation
        if num_proc_per_node is not None:
            self.num_proc_per_node = num_proc_per_node
        if run_launcher_as_node is not None:
            self.run_launcher_as_node = run_launcher_as_node
        if ssh_auth_mount_path is not None:
            self.ssh_auth_mount_path = ssh_auth_mount_path

    @property
    def mpi_implementation(self):
        """Gets the mpi_implementation of this V1beta1MPIMLPolicyConfig.  # noqa: E501

        Implementation name for the MPI to create the appropriate hostfile. Defaults to OpenMPI.  # noqa: E501

        :return: The mpi_implementation of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :rtype: str
        """
        return self._mpi_implementation

    @mpi_implementation.setter
    def mpi_implementation(self, mpi_implementation):
        """Sets the mpi_implementation of this V1beta1MPIMLPolicyConfig.

        Implementation name for the MPI to create the appropriate hostfile. Defaults to OpenMPI.  # noqa: E501

        :param mpi_implementation: The mpi_implementation of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :type: str
        """

        self._mpi_implementation = mpi_implementation

    @property
    def num_proc_per_node(self):
        """Gets the num_proc_per_node of this V1beta1MPIMLPolicyConfig.  # noqa: E501

        Number of processes per node. This value is equal to the number of slots for each node in the hostfile.  # noqa: E501

        :return: The num_proc_per_node of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :rtype: int
        """
        return self._num_proc_per_node

    @num_proc_per_node.setter
    def num_proc_per_node(self, num_proc_per_node):
        """Sets the num_proc_per_node of this V1beta1MPIMLPolicyConfig.

        Number of processes per node. This value is equal to the number of slots for each node in the hostfile.  # noqa: E501

        :param num_proc_per_node: The num_proc_per_node of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :type: int
        """

        self._num_proc_per_node = num_proc_per_node

    @property
    def run_launcher_as_node(self):
        """Gets the run_launcher_as_node of this V1beta1MPIMLPolicyConfig.  # noqa: E501

        Whether to run training process on the launcher Job. Defaults to false.  # noqa: E501

        :return: The run_launcher_as_node of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :rtype: bool
        """
        return self._run_launcher_as_node

    @run_launcher_as_node.setter
    def run_launcher_as_node(self, run_launcher_as_node):
        """Sets the run_launcher_as_node of this V1beta1MPIMLPolicyConfig.

        Whether to run training process on the launcher Job. Defaults to false.  # noqa: E501

        :param run_launcher_as_node: The run_launcher_as_node of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :type: bool
        """

        self._run_launcher_as_node = run_launcher_as_node

    @property
    def ssh_auth_mount_path(self):
        """Gets the ssh_auth_mount_path of this V1beta1MPIMLPolicyConfig.  # noqa: E501

        Directory where SSH keys are mounted.  # noqa: E501

        :return: The ssh_auth_mount_path of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :rtype: str
        """
        return self._ssh_auth_mount_path

    @ssh_auth_mount_path.setter
    def ssh_auth_mount_path(self, ssh_auth_mount_path):
        """Sets the ssh_auth_mount_path of this V1beta1MPIMLPolicyConfig.

        Directory where SSH keys are mounted.  # noqa: E501

        :param ssh_auth_mount_path: The ssh_auth_mount_path of this V1beta1MPIMLPolicyConfig.  # noqa: E501
        :type: str
        """

        self._ssh_auth_mount_path = ssh_auth_mount_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1MPIMLPolicyConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1MPIMLPolicyConfig):
            return True

        return self.to_dict() != other.to_dict()
