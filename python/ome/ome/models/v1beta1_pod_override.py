# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1PodOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "affinity": "V1Affinity",
        "env": "list[V1EnvVar]",
        "env_from": "list[V1EnvFromSource]",
        "image": "str",
        "node_selector": "dict(str, str)",
        "resources": "V1ResourceRequirements",
        "tolerations": "list[V1Toleration]",
        "volume_mounts": "list[V1VolumeMount]",
        "volumes": "list[V1Volume]",
    }

    attribute_map = {
        "affinity": "affinity",
        "env": "env",
        "env_from": "envFrom",
        "image": "image",
        "node_selector": "nodeSelector",
        "resources": "resources",
        "tolerations": "tolerations",
        "volume_mounts": "volumeMounts",
        "volumes": "volumes",
    }

    def __init__(
        self,
        affinity=None,
        env=None,
        env_from=None,
        image=None,
        node_selector=None,
        resources=None,
        tolerations=None,
        volume_mounts=None,
        volumes=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1PodOverride - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._env = None
        self._env_from = None
        self._image = None
        self._node_selector = None
        self._resources = None
        self._tolerations = None
        self._volume_mounts = None
        self._volumes = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        if env is not None:
            self.env = env
        if env_from is not None:
            self.env_from = env_from
        if image is not None:
            self.image = image
        if node_selector is not None:
            self.node_selector = node_selector
        if resources is not None:
            self.resources = resources
        if tolerations is not None:
            self.tolerations = tolerations
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts
        if volumes is not None:
            self.volumes = volumes

    @property
    def affinity(self):
        """Gets the affinity of this V1beta1PodOverride.  # noqa: E501


        :return: The affinity of this V1beta1PodOverride.  # noqa: E501
        :rtype: V1Affinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this V1beta1PodOverride.


        :param affinity: The affinity of this V1beta1PodOverride.  # noqa: E501
        :type: V1Affinity
        """

        self._affinity = affinity

    @property
    def env(self):
        """Gets the env of this V1beta1PodOverride.  # noqa: E501

        List of environment variables to set in the container.  # noqa: E501

        :return: The env of this V1beta1PodOverride.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this V1beta1PodOverride.

        List of environment variables to set in the container.  # noqa: E501

        :param env: The env of this V1beta1PodOverride.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def env_from(self):
        """Gets the env_from of this V1beta1PodOverride.  # noqa: E501

        List of sources to populate environment variables in the container.  # noqa: E501

        :return: The env_from of this V1beta1PodOverride.  # noqa: E501
        :rtype: list[V1EnvFromSource]
        """
        return self._env_from

    @env_from.setter
    def env_from(self, env_from):
        """Sets the env_from of this V1beta1PodOverride.

        List of sources to populate environment variables in the container.  # noqa: E501

        :param env_from: The env_from of this V1beta1PodOverride.  # noqa: E501
        :type: list[V1EnvFromSource]
        """

        self._env_from = env_from

    @property
    def image(self):
        """Gets the image of this V1beta1PodOverride.  # noqa: E501

        Image specifies the container image to use for the benchmark job.  # noqa: E501

        :return: The image of this V1beta1PodOverride.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this V1beta1PodOverride.

        Image specifies the container image to use for the benchmark job.  # noqa: E501

        :param image: The image of this V1beta1PodOverride.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def node_selector(self):
        """Gets the node_selector of this V1beta1PodOverride.  # noqa: E501

        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/  # noqa: E501

        :return: The node_selector of this V1beta1PodOverride.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this V1beta1PodOverride.

        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/  # noqa: E501

        :param node_selector: The node_selector of this V1beta1PodOverride.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def resources(self):
        """Gets the resources of this V1beta1PodOverride.  # noqa: E501


        :return: The resources of this V1beta1PodOverride.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this V1beta1PodOverride.


        :param resources: The resources of this V1beta1PodOverride.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._resources = resources

    @property
    def tolerations(self):
        """Gets the tolerations of this V1beta1PodOverride.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this V1beta1PodOverride.  # noqa: E501
        :rtype: list[V1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this V1beta1PodOverride.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this V1beta1PodOverride.  # noqa: E501
        :type: list[V1Toleration]
        """

        self._tolerations = tolerations

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this V1beta1PodOverride.  # noqa: E501

        Pod volumes to mount into the container's filesystem.  # noqa: E501

        :return: The volume_mounts of this V1beta1PodOverride.  # noqa: E501
        :rtype: list[V1VolumeMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this V1beta1PodOverride.

        Pod volumes to mount into the container's filesystem.  # noqa: E501

        :param volume_mounts: The volume_mounts of this V1beta1PodOverride.  # noqa: E501
        :type: list[V1VolumeMount]
        """

        self._volume_mounts = volume_mounts

    @property
    def volumes(self):
        """Gets the volumes of this V1beta1PodOverride.  # noqa: E501

        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes  # noqa: E501

        :return: The volumes of this V1beta1PodOverride.  # noqa: E501
        :rtype: list[V1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this V1beta1PodOverride.

        List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes  # noqa: E501

        :param volumes: The volumes of this V1beta1PodOverride.  # noqa: E501
        :type: list[V1Volume]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1PodOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1PodOverride):
            return True

        return self.to_dict() != other.to_dict()
