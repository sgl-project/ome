# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1SupportedModelFormat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "auto_select": "bool",
        "model_architecture": "str",
        "model_format": "V1beta1ModelFormat",
        "model_framework": "V1beta1ModelFrameworkSpec",
        "model_type": "str",
        "name": "str",
        "priority": "int",
        "quantization": "str",
        "version": "str",
    }

    attribute_map = {
        "auto_select": "autoSelect",
        "model_architecture": "modelArchitecture",
        "model_format": "modelFormat",
        "model_framework": "modelFramework",
        "model_type": "modelType",
        "name": "name",
        "priority": "priority",
        "quantization": "quantization",
        "version": "version",
    }

    def __init__(
        self,
        auto_select=None,
        model_architecture=None,
        model_format=None,
        model_framework=None,
        model_type=None,
        name="",
        priority=None,
        quantization=None,
        version=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1SupportedModelFormat - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_select = None
        self._model_architecture = None
        self._model_format = None
        self._model_framework = None
        self._model_type = None
        self._name = None
        self._priority = None
        self._quantization = None
        self._version = None
        self.discriminator = None

        if auto_select is not None:
            self.auto_select = auto_select
        if model_architecture is not None:
            self.model_architecture = model_architecture
        self.model_format = model_format
        self.model_framework = model_framework
        if model_type is not None:
            self.model_type = model_type
        if name is not None:
            self.name = name
        if priority is not None:
            self.priority = priority
        if quantization is not None:
            self.quantization = quantization
        if version is not None:
            self.version = version

    @property
    def auto_select(self):
        """Gets the auto_select of this V1beta1SupportedModelFormat.  # noqa: E501

        Set to true to allow the ServingRuntime to be used for automatic model placement if this model format is specified with no explicit runtime.  # noqa: E501

        :return: The auto_select of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: bool
        """
        return self._auto_select

    @auto_select.setter
    def auto_select(self, auto_select):
        """Sets the auto_select of this V1beta1SupportedModelFormat.

        Set to true to allow the ServingRuntime to be used for automatic model placement if this model format is specified with no explicit runtime.  # noqa: E501

        :param auto_select: The auto_select of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: bool
        """

        self._auto_select = auto_select

    @property
    def model_architecture(self):
        """Gets the model_architecture of this V1beta1SupportedModelFormat.  # noqa: E501

        ModelArchitecture of the model, e.g., \"LlamaForCausalLM\", \"GemmaForCausalLM\", \"MixtralForCausalLM\"  # noqa: E501

        :return: The model_architecture of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: str
        """
        return self._model_architecture

    @model_architecture.setter
    def model_architecture(self, model_architecture):
        """Sets the model_architecture of this V1beta1SupportedModelFormat.

        ModelArchitecture of the model, e.g., \"LlamaForCausalLM\", \"GemmaForCausalLM\", \"MixtralForCausalLM\"  # noqa: E501

        :param model_architecture: The model_architecture of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: str
        """

        self._model_architecture = model_architecture

    @property
    def model_format(self):
        """Gets the model_format of this V1beta1SupportedModelFormat.  # noqa: E501


        :return: The model_format of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: V1beta1ModelFormat
        """
        return self._model_format

    @model_format.setter
    def model_format(self, model_format):
        """Sets the model_format of this V1beta1SupportedModelFormat.


        :param model_format: The model_format of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: V1beta1ModelFormat
        """
        if (
            self.local_vars_configuration.client_side_validation
            and model_format is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `model_format`, must not be `None`")  # noqa: E501

        self._model_format = model_format

    @property
    def model_framework(self):
        """Gets the model_framework of this V1beta1SupportedModelFormat.  # noqa: E501


        :return: The model_framework of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: V1beta1ModelFrameworkSpec
        """
        return self._model_framework

    @model_framework.setter
    def model_framework(self, model_framework):
        """Sets the model_framework of this V1beta1SupportedModelFormat.


        :param model_framework: The model_framework of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: V1beta1ModelFrameworkSpec
        """
        if (
            self.local_vars_configuration.client_side_validation
            and model_framework is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `model_framework`, must not be `None`")  # noqa: E501

        self._model_framework = model_framework

    @property
    def model_type(self):
        """Gets the model_type of this V1beta1SupportedModelFormat.  # noqa: E501

        DEPRECATED: This field is deprecated and will be removed in future releases.  # noqa: E501

        :return: The model_type of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this V1beta1SupportedModelFormat.

        DEPRECATED: This field is deprecated and will be removed in future releases.  # noqa: E501

        :param model_type: The model_type of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def name(self):
        """Gets the name of this V1beta1SupportedModelFormat.  # noqa: E501

        Name of the model  # noqa: E501

        :return: The name of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1beta1SupportedModelFormat.

        Name of the model  # noqa: E501

        :param name: The name of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this V1beta1SupportedModelFormat.  # noqa: E501

        Priority of this serving runtime for auto selection. This is used to select the serving runtime if more than one serving runtime supports the same model format. The value should be greater than zero.  The higher the value, the higher the priority. Priority is not considered if AutoSelect is either false or not specified. Priority can be overridden by specifying the runtime in the InferenceService.  # noqa: E501

        :return: The priority of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this V1beta1SupportedModelFormat.

        Priority of this serving runtime for auto selection. This is used to select the serving runtime if more than one serving runtime supports the same model format. The value should be greater than zero.  The higher the value, the higher the priority. Priority is not considered if AutoSelect is either false or not specified. Priority can be overridden by specifying the runtime in the InferenceService.  # noqa: E501

        :param priority: The priority of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def quantization(self):
        """Gets the quantization of this V1beta1SupportedModelFormat.  # noqa: E501

        Quantization of the model, e.g., \"fp8\", \"fbgemm_fp8\", \"int4\"  # noqa: E501

        :return: The quantization of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: str
        """
        return self._quantization

    @quantization.setter
    def quantization(self, quantization):
        """Sets the quantization of this V1beta1SupportedModelFormat.

        Quantization of the model, e.g., \"fp8\", \"fbgemm_fp8\", \"int4\"  # noqa: E501

        :param quantization: The quantization of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: str
        """

        self._quantization = quantization

    @property
    def version(self):
        """Gets the version of this V1beta1SupportedModelFormat.  # noqa: E501

        Version of the model format. Used in validating that a runtime supports a predictor. It Can be \"major\", \"major.minor\" or \"major.minor.patch\".  # noqa: E501

        :return: The version of this V1beta1SupportedModelFormat.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1beta1SupportedModelFormat.

        Version of the model format. Used in validating that a runtime supports a predictor. It Can be \"major\", \"major.minor\" or \"major.minor.patch\".  # noqa: E501

        :param version: The version of this V1beta1SupportedModelFormat.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1SupportedModelFormat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1SupportedModelFormat):
            return True

        return self.to_dict() != other.to_dict()
