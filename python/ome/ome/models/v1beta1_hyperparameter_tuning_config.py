# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1HyperparameterTuningConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "max_trials": "int",
        "method": "str",
        "metric": "V1beta1MetricConfig",
        "parameters": "K8sIoApimachineryPkgRuntimeRawExtension",
    }

    attribute_map = {
        "max_trials": "maxTrials",
        "method": "method",
        "metric": "metric",
        "parameters": "parameters",
    }

    def __init__(
        self,
        max_trials=None,
        method="",
        metric=None,
        parameters=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1HyperparameterTuningConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max_trials = None
        self._method = None
        self._metric = None
        self._parameters = None
        self.discriminator = None

        if max_trials is not None:
            self.max_trials = max_trials
        self.method = method
        self.metric = metric
        self.parameters = parameters

    @property
    def max_trials(self):
        """Gets the max_trials of this V1beta1HyperparameterTuningConfig.  # noqa: E501

        MaxTrials specifies the maximum number of trials to run  # noqa: E501

        :return: The max_trials of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_trials

    @max_trials.setter
    def max_trials(self, max_trials):
        """Sets the max_trials of this V1beta1HyperparameterTuningConfig.

        MaxTrials specifies the maximum number of trials to run  # noqa: E501

        :param max_trials: The max_trials of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :type: int
        """

        self._max_trials = max_trials

    @property
    def method(self):
        """Gets the method of this V1beta1HyperparameterTuningConfig.  # noqa: E501

        Method specifies the search algorithm to use (grid, random, bayes)  # noqa: E501

        :return: The method of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this V1beta1HyperparameterTuningConfig.

        Method specifies the search algorithm to use (grid, random, bayes)  # noqa: E501

        :param method: The method of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and method is None:  # noqa: E501
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def metric(self):
        """Gets the metric of this V1beta1HyperparameterTuningConfig.  # noqa: E501


        :return: The metric of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :rtype: V1beta1MetricConfig
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this V1beta1HyperparameterTuningConfig.


        :param metric: The metric of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :type: V1beta1MetricConfig
        """
        if self.local_vars_configuration.client_side_validation and metric is None:  # noqa: E501
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def parameters(self):
        """Gets the parameters of this V1beta1HyperparameterTuningConfig.  # noqa: E501


        :return: The parameters of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :rtype: K8sIoApimachineryPkgRuntimeRawExtension
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this V1beta1HyperparameterTuningConfig.


        :param parameters: The parameters of this V1beta1HyperparameterTuningConfig.  # noqa: E501
        :type: K8sIoApimachineryPkgRuntimeRawExtension
        """
        if self.local_vars_configuration.client_side_validation and parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1HyperparameterTuningConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1HyperparameterTuningConfig):
            return True

        return self.to_dict() != other.to_dict()
