# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1ModelRef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "api_group": "str",
        "fine_tuned_weights": "list[str]",
        "kind": "str",
        "name": "str",
    }

    attribute_map = {
        "api_group": "apiGroup",
        "fine_tuned_weights": "fineTunedWeights",
        "kind": "kind",
        "name": "name",
    }

    def __init__(
        self,
        api_group=None,
        fine_tuned_weights=None,
        kind=None,
        name="",
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1ModelRef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_group = None
        self._fine_tuned_weights = None
        self._kind = None
        self._name = None
        self.discriminator = None

        if api_group is not None:
            self.api_group = api_group
        if fine_tuned_weights is not None:
            self.fine_tuned_weights = fine_tuned_weights
        if kind is not None:
            self.kind = kind
        if name is not None:
            self.name = name

    @property
    def api_group(self):
        """Gets the api_group of this V1beta1ModelRef.  # noqa: E501

        APIGroup of the resource being referenced Defaults to `ome.io` Specifies the Kubernetes API group of the referenced model.  # noqa: E501

        :return: The api_group of this V1beta1ModelRef.  # noqa: E501
        :rtype: str
        """
        return self._api_group

    @api_group.setter
    def api_group(self, api_group):
        """Sets the api_group of this V1beta1ModelRef.

        APIGroup of the resource being referenced Defaults to `ome.io` Specifies the Kubernetes API group of the referenced model.  # noqa: E501

        :param api_group: The api_group of this V1beta1ModelRef.  # noqa: E501
        :type: str
        """

        self._api_group = api_group

    @property
    def fine_tuned_weights(self):
        """Gets the fine_tuned_weights of this V1beta1ModelRef.  # noqa: E501

        Optional FineTunedWeights references References to fine-tuned weights that should be applied to the base model.  # noqa: E501

        :return: The fine_tuned_weights of this V1beta1ModelRef.  # noqa: E501
        :rtype: list[str]
        """
        return self._fine_tuned_weights

    @fine_tuned_weights.setter
    def fine_tuned_weights(self, fine_tuned_weights):
        """Sets the fine_tuned_weights of this V1beta1ModelRef.

        Optional FineTunedWeights references References to fine-tuned weights that should be applied to the base model.  # noqa: E501

        :param fine_tuned_weights: The fine_tuned_weights of this V1beta1ModelRef.  # noqa: E501
        :type: list[str]
        """

        self._fine_tuned_weights = fine_tuned_weights

    @property
    def kind(self):
        """Gets the kind of this V1beta1ModelRef.  # noqa: E501

        Kind of the model being referenced Defaults to ClusterBaseModel Specifies the Kubernetes resource kind of the referenced model.  # noqa: E501

        :return: The kind of this V1beta1ModelRef.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1beta1ModelRef.

        Kind of the model being referenced Defaults to ClusterBaseModel Specifies the Kubernetes resource kind of the referenced model.  # noqa: E501

        :param kind: The kind of this V1beta1ModelRef.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this V1beta1ModelRef.  # noqa: E501

        Name of the model being referenced Identifies the specific model to be used for inference.  # noqa: E501

        :return: The name of this V1beta1ModelRef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1beta1ModelRef.

        Name of the model being referenced Identifies the specific model to be used for inference.  # noqa: E501

        :param name: The name of this V1beta1ModelRef.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ModelRef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1ModelRef):
            return True

        return self.to_dict() != other.to_dict()
