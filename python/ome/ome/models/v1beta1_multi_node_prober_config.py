# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self


class V1beta1MultiNodeProberConfig(BaseModel):
    """
    V1beta1MultiNodeProberConfig
    """  # noqa: E501

    cpu_limit: StrictStr = Field(alias="cpuLimit")
    cpu_request: StrictStr = Field(alias="cpuRequest")
    image: StrictStr
    memory_limit: StrictStr = Field(alias="memoryLimit")
    memory_request: StrictStr = Field(alias="memoryRequest")
    startup_failure_threshold: StrictInt = Field(alias="startupFailureThreshold")
    startup_initial_delay_seconds: StrictInt = Field(alias="startupInitialDelaySeconds")
    startup_period_seconds: StrictInt = Field(alias="startupPeriodSeconds")
    startup_timeout_seconds: StrictInt = Field(alias="startupTimeoutSeconds")
    unavailable_threshold_seconds: StrictInt = Field(
        alias="unavailableThresholdSeconds"
    )
    __properties: ClassVar[List[str]] = [
        "cpuLimit",
        "cpuRequest",
        "image",
        "memoryLimit",
        "memoryRequest",
        "startupFailureThreshold",
        "startupInitialDelaySeconds",
        "startupPeriodSeconds",
        "startupTimeoutSeconds",
        "unavailableThresholdSeconds",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1MultiNodeProberConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1MultiNodeProberConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "cpuLimit": (
                    obj.get("cpuLimit") if obj.get("cpuLimit") is not None else ""
                ),
                "cpuRequest": (
                    obj.get("cpuRequest") if obj.get("cpuRequest") is not None else ""
                ),
                "image": obj.get("image") if obj.get("image") is not None else "",
                "memoryLimit": (
                    obj.get("memoryLimit") if obj.get("memoryLimit") is not None else ""
                ),
                "memoryRequest": (
                    obj.get("memoryRequest")
                    if obj.get("memoryRequest") is not None
                    else ""
                ),
                "startupFailureThreshold": (
                    obj.get("startupFailureThreshold")
                    if obj.get("startupFailureThreshold") is not None
                    else 0
                ),
                "startupInitialDelaySeconds": (
                    obj.get("startupInitialDelaySeconds")
                    if obj.get("startupInitialDelaySeconds") is not None
                    else 0
                ),
                "startupPeriodSeconds": (
                    obj.get("startupPeriodSeconds")
                    if obj.get("startupPeriodSeconds") is not None
                    else 0
                ),
                "startupTimeoutSeconds": (
                    obj.get("startupTimeoutSeconds")
                    if obj.get("startupTimeoutSeconds") is not None
                    else 0
                ),
                "unavailableThresholdSeconds": (
                    obj.get("unavailableThresholdSeconds")
                    if obj.get("unavailableThresholdSeconds") is not None
                    else 0
                ),
            }
        )
        return _obj
