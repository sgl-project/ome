# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1TrainingJobStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "completion_time": "V1Time",
        "conditions": "list[V1Condition]",
        "jobs_status": "list[V1beta1JobStatus]",
        "last_reconcile_time": "V1Time",
        "retry_count": "int",
        "start_time": "V1Time",
    }

    attribute_map = {
        "completion_time": "completionTime",
        "conditions": "conditions",
        "jobs_status": "jobsStatus",
        "last_reconcile_time": "lastReconcileTime",
        "retry_count": "retryCount",
        "start_time": "startTime",
    }

    def __init__(
        self,
        completion_time=None,
        conditions=None,
        jobs_status=None,
        last_reconcile_time=None,
        retry_count=None,
        start_time=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1TrainingJobStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completion_time = None
        self._conditions = None
        self._jobs_status = None
        self._last_reconcile_time = None
        self._retry_count = None
        self._start_time = None
        self.discriminator = None

        if completion_time is not None:
            self.completion_time = completion_time
        if conditions is not None:
            self.conditions = conditions
        if jobs_status is not None:
            self.jobs_status = jobs_status
        if last_reconcile_time is not None:
            self.last_reconcile_time = last_reconcile_time
        if retry_count is not None:
            self.retry_count = retry_count
        if start_time is not None:
            self.start_time = start_time

    @property
    def completion_time(self):
        """Gets the completion_time of this V1beta1TrainingJobStatus.  # noqa: E501


        :return: The completion_time of this V1beta1TrainingJobStatus.  # noqa: E501
        :rtype: V1Time
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this V1beta1TrainingJobStatus.


        :param completion_time: The completion_time of this V1beta1TrainingJobStatus.  # noqa: E501
        :type: V1Time
        """

        self._completion_time = completion_time

    @property
    def conditions(self):
        """Gets the conditions of this V1beta1TrainingJobStatus.  # noqa: E501

        Conditions is an array of current observed job conditions.  # noqa: E501

        :return: The conditions of this V1beta1TrainingJobStatus.  # noqa: E501
        :rtype: list[V1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this V1beta1TrainingJobStatus.

        Conditions is an array of current observed job conditions.  # noqa: E501

        :param conditions: The conditions of this V1beta1TrainingJobStatus.  # noqa: E501
        :type: list[V1Condition]
        """

        self._conditions = conditions

    @property
    def jobs_status(self):
        """Gets the jobs_status of this V1beta1TrainingJobStatus.  # noqa: E501

        JobsStatus tracks the child Jobs in TrainJob.  # noqa: E501

        :return: The jobs_status of this V1beta1TrainingJobStatus.  # noqa: E501
        :rtype: list[V1beta1JobStatus]
        """
        return self._jobs_status

    @jobs_status.setter
    def jobs_status(self, jobs_status):
        """Sets the jobs_status of this V1beta1TrainingJobStatus.

        JobsStatus tracks the child Jobs in TrainJob.  # noqa: E501

        :param jobs_status: The jobs_status of this V1beta1TrainingJobStatus.  # noqa: E501
        :type: list[V1beta1JobStatus]
        """

        self._jobs_status = jobs_status

    @property
    def last_reconcile_time(self):
        """Gets the last_reconcile_time of this V1beta1TrainingJobStatus.  # noqa: E501


        :return: The last_reconcile_time of this V1beta1TrainingJobStatus.  # noqa: E501
        :rtype: V1Time
        """
        return self._last_reconcile_time

    @last_reconcile_time.setter
    def last_reconcile_time(self, last_reconcile_time):
        """Sets the last_reconcile_time of this V1beta1TrainingJobStatus.


        :param last_reconcile_time: The last_reconcile_time of this V1beta1TrainingJobStatus.  # noqa: E501
        :type: V1Time
        """

        self._last_reconcile_time = last_reconcile_time

    @property
    def retry_count(self):
        """Gets the retry_count of this V1beta1TrainingJobStatus.  # noqa: E501

        RetryCount represents the number of retries the training job has performed  # noqa: E501

        :return: The retry_count of this V1beta1TrainingJobStatus.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this V1beta1TrainingJobStatus.

        RetryCount represents the number of retries the training job has performed  # noqa: E501

        :param retry_count: The retry_count of this V1beta1TrainingJobStatus.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def start_time(self):
        """Gets the start_time of this V1beta1TrainingJobStatus.  # noqa: E501


        :return: The start_time of this V1beta1TrainingJobStatus.  # noqa: E501
        :rtype: V1Time
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1beta1TrainingJobStatus.


        :param start_time: The start_time of this V1beta1TrainingJobStatus.  # noqa: E501
        :type: V1Time
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TrainingJobStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1TrainingJobStatus):
            return True

        return self.to_dict() != other.to_dict()
