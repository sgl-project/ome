# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1KedaConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "custom_prom_query": "str",
        "enable_keda": "bool",
        "prom_server_address": "str",
        "scaling_operator": "str",
        "scaling_threshold": "str",
    }

    attribute_map = {
        "custom_prom_query": "customPromQuery",
        "enable_keda": "enableKeda",
        "prom_server_address": "promServerAddress",
        "scaling_operator": "scalingOperator",
        "scaling_threshold": "scalingThreshold",
    }

    def __init__(
        self,
        custom_prom_query=None,
        enable_keda=None,
        prom_server_address=None,
        scaling_operator=None,
        scaling_threshold=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1KedaConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._custom_prom_query = None
        self._enable_keda = None
        self._prom_server_address = None
        self._scaling_operator = None
        self._scaling_threshold = None
        self.discriminator = None

        if custom_prom_query is not None:
            self.custom_prom_query = custom_prom_query
        if enable_keda is not None:
            self.enable_keda = enable_keda
        if prom_server_address is not None:
            self.prom_server_address = prom_server_address
        if scaling_operator is not None:
            self.scaling_operator = scaling_operator
        if scaling_threshold is not None:
            self.scaling_threshold = scaling_threshold

    @property
    def custom_prom_query(self):
        """Gets the custom_prom_query of this V1beta1KedaConfig.  # noqa: E501

        CustomPromQuery defines a custom Prometheus query that KEDA will execute to evaluate the desired metric for scaling. This query should return a single numerical value that represents the metric to be monitored.  Example:   avg_over_time(http_requests_total{service=\"llama\"}[5m])  # noqa: E501

        :return: The custom_prom_query of this V1beta1KedaConfig.  # noqa: E501
        :rtype: str
        """
        return self._custom_prom_query

    @custom_prom_query.setter
    def custom_prom_query(self, custom_prom_query):
        """Sets the custom_prom_query of this V1beta1KedaConfig.

        CustomPromQuery defines a custom Prometheus query that KEDA will execute to evaluate the desired metric for scaling. This query should return a single numerical value that represents the metric to be monitored.  Example:   avg_over_time(http_requests_total{service=\"llama\"}[5m])  # noqa: E501

        :param custom_prom_query: The custom_prom_query of this V1beta1KedaConfig.  # noqa: E501
        :type: str
        """

        self._custom_prom_query = custom_prom_query

    @property
    def enable_keda(self):
        """Gets the enable_keda of this V1beta1KedaConfig.  # noqa: E501

        EnableKeda determines whether KEDA autoscaling is enabled for the InferenceService. - true: KEDA will manage the autoscaling based on the provided configuration. - false: KEDA will not be used, and autoscaling will rely on other mechanisms (e.g., HPA).  # noqa: E501

        :return: The enable_keda of this V1beta1KedaConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable_keda

    @enable_keda.setter
    def enable_keda(self, enable_keda):
        """Sets the enable_keda of this V1beta1KedaConfig.

        EnableKeda determines whether KEDA autoscaling is enabled for the InferenceService. - true: KEDA will manage the autoscaling based on the provided configuration. - false: KEDA will not be used, and autoscaling will rely on other mechanisms (e.g., HPA).  # noqa: E501

        :param enable_keda: The enable_keda of this V1beta1KedaConfig.  # noqa: E501
        :type: bool
        """

        self._enable_keda = enable_keda

    @property
    def prom_server_address(self):
        """Gets the prom_server_address of this V1beta1KedaConfig.  # noqa: E501

        PromServerAddress specifies the address of the Prometheus server that KEDA will query to retrieve metrics for autoscaling decisions. This should be a fully qualified URL, including the protocol and port number.  Example:   http://prometheus-operated.monitoring.svc.cluster.local:9090  # noqa: E501

        :return: The prom_server_address of this V1beta1KedaConfig.  # noqa: E501
        :rtype: str
        """
        return self._prom_server_address

    @prom_server_address.setter
    def prom_server_address(self, prom_server_address):
        """Sets the prom_server_address of this V1beta1KedaConfig.

        PromServerAddress specifies the address of the Prometheus server that KEDA will query to retrieve metrics for autoscaling decisions. This should be a fully qualified URL, including the protocol and port number.  Example:   http://prometheus-operated.monitoring.svc.cluster.local:9090  # noqa: E501

        :param prom_server_address: The prom_server_address of this V1beta1KedaConfig.  # noqa: E501
        :type: str
        """

        self._prom_server_address = prom_server_address

    @property
    def scaling_operator(self):
        """Gets the scaling_operator of this V1beta1KedaConfig.  # noqa: E501

        ScalingOperator specifies the comparison operator used by KEDA to decide whether to scale the Deployment. Common operators include: - \"GreaterThanOrEqual\": Scale up when the metric is >= ScalingThreshold. - \"LessThanOrEqual\": Scale down when the metric is <= ScalingThreshold.  This operator defines the condition under which scaling actions are triggered based on the evaluated metric.  Example:   \"GreaterThanOrEqual\"  # noqa: E501

        :return: The scaling_operator of this V1beta1KedaConfig.  # noqa: E501
        :rtype: str
        """
        return self._scaling_operator

    @scaling_operator.setter
    def scaling_operator(self, scaling_operator):
        """Sets the scaling_operator of this V1beta1KedaConfig.

        ScalingOperator specifies the comparison operator used by KEDA to decide whether to scale the Deployment. Common operators include: - \"GreaterThanOrEqual\": Scale up when the metric is >= ScalingThreshold. - \"LessThanOrEqual\": Scale down when the metric is <= ScalingThreshold.  This operator defines the condition under which scaling actions are triggered based on the evaluated metric.  Example:   \"GreaterThanOrEqual\"  # noqa: E501

        :param scaling_operator: The scaling_operator of this V1beta1KedaConfig.  # noqa: E501
        :type: str
        """

        self._scaling_operator = scaling_operator

    @property
    def scaling_threshold(self):
        """Gets the scaling_threshold of this V1beta1KedaConfig.  # noqa: E501

        ScalingThreshold sets the numerical threshold against which the result of the Prometheus query will be compared. Depending on the ScalingOperator, this threshold determines when to scale the number of replicas up or down.  Example:   \"10\" - The Autoscaler will compare the metric value to 10.  # noqa: E501

        :return: The scaling_threshold of this V1beta1KedaConfig.  # noqa: E501
        :rtype: str
        """
        return self._scaling_threshold

    @scaling_threshold.setter
    def scaling_threshold(self, scaling_threshold):
        """Sets the scaling_threshold of this V1beta1KedaConfig.

        ScalingThreshold sets the numerical threshold against which the result of the Prometheus query will be compared. Depending on the ScalingOperator, this threshold determines when to scale the number of replicas up or down.  Example:   \"10\" - The Autoscaler will compare the metric value to 10.  # noqa: E501

        :param scaling_threshold: The scaling_threshold of this V1beta1KedaConfig.  # noqa: E501
        :type: str
        """

        self._scaling_threshold = scaling_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1KedaConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1KedaConfig):
            return True

        return self.to_dict() != other.to_dict()
