# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1Endpoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"api_format": "str", "model_name": "str", "url": "str"}

    attribute_map = {"api_format": "apiFormat", "model_name": "modelName", "url": "url"}

    def __init__(
        self, api_format="", model_name=None, url="", local_vars_configuration=None
    ):  # noqa: E501
        """V1beta1Endpoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_format = None
        self._model_name = None
        self._url = None
        self.discriminator = None

        self.api_format = api_format
        if model_name is not None:
            self.model_name = model_name
        self.url = url

    @property
    def api_format(self):
        """Gets the api_format of this V1beta1Endpoint.  # noqa: E501

        APIFormat specifies the type of API, such as \"openai\" or \"oci-cohere\".  # noqa: E501

        :return: The api_format of this V1beta1Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._api_format

    @api_format.setter
    def api_format(self, api_format):
        """Sets the api_format of this V1beta1Endpoint.

        APIFormat specifies the type of API, such as \"openai\" or \"oci-cohere\".  # noqa: E501

        :param api_format: The api_format of this V1beta1Endpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and api_format is None:  # noqa: E501
            raise ValueError("Invalid value for `api_format`, must not be `None`")  # noqa: E501

        self._api_format = api_format

    @property
    def model_name(self):
        """Gets the model_name of this V1beta1Endpoint.  # noqa: E501

        ModelName specifies the name of the model being served at the endpoint. Useful for endpoints that require model-specific configuration. For instance, for openai API, this is a required field in the payload  # noqa: E501

        :return: The model_name of this V1beta1Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this V1beta1Endpoint.

        ModelName specifies the name of the model being served at the endpoint. Useful for endpoints that require model-specific configuration. For instance, for openai API, this is a required field in the payload  # noqa: E501

        :param model_name: The model_name of this V1beta1Endpoint.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def url(self):
        """Gets the url of this V1beta1Endpoint.  # noqa: E501

        URL represents the endpoint URL for the inference service.  # noqa: E501

        :return: The url of this V1beta1Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1beta1Endpoint.

        URL represents the endpoint URL for the inference service.  # noqa: E501

        :param url: The url of this V1beta1Endpoint.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1Endpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1Endpoint):
            return True

        return self.to_dict() != other.to_dict()
