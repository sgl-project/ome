# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1InferenceServiceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "compartment_id": "str",
        "decoder": "V1beta1DecoderSpec",
        "engine": "V1beta1EngineSpec",
        "keda_config": "V1beta1KedaConfig",
        "model": "V1beta1ModelRef",
        "predictor": "V1beta1PredictorSpec",
        "router": "V1beta1RouterSpec",
        "runtime": "V1beta1ServingRuntimeRef",
    }

    attribute_map = {
        "compartment_id": "compartmentID",
        "decoder": "decoder",
        "engine": "engine",
        "keda_config": "kedaConfig",
        "model": "model",
        "predictor": "predictor",
        "router": "router",
        "runtime": "runtime",
    }

    def __init__(
        self,
        compartment_id=None,
        decoder=None,
        engine=None,
        keda_config=None,
        model=None,
        predictor=None,
        router=None,
        runtime=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1InferenceServiceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._compartment_id = None
        self._decoder = None
        self._engine = None
        self._keda_config = None
        self._model = None
        self._predictor = None
        self._router = None
        self._runtime = None
        self.discriminator = None

        if compartment_id is not None:
            self.compartment_id = compartment_id
        if decoder is not None:
            self.decoder = decoder
        if engine is not None:
            self.engine = engine
        if keda_config is not None:
            self.keda_config = keda_config
        if model is not None:
            self.model = model
        self.predictor = predictor
        if router is not None:
            self.router = router
        if runtime is not None:
            self.runtime = runtime

    @property
    def compartment_id(self):
        """Gets the compartment_id of this V1beta1InferenceServiceSpec.  # noqa: E501

        The compartment ID to use for the inference service Specifies the OCI compartment where the inference service resources will be created.  # noqa: E501

        :return: The compartment_id of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: str
        """
        return self._compartment_id

    @compartment_id.setter
    def compartment_id(self, compartment_id):
        """Sets the compartment_id of this V1beta1InferenceServiceSpec.

        The compartment ID to use for the inference service Specifies the OCI compartment where the inference service resources will be created.  # noqa: E501

        :param compartment_id: The compartment_id of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: str
        """

        self._compartment_id = compartment_id

    @property
    def decoder(self):
        """Gets the decoder of this V1beta1InferenceServiceSpec.  # noqa: E501


        :return: The decoder of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: V1beta1DecoderSpec
        """
        return self._decoder

    @decoder.setter
    def decoder(self, decoder):
        """Sets the decoder of this V1beta1InferenceServiceSpec.


        :param decoder: The decoder of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: V1beta1DecoderSpec
        """

        self._decoder = decoder

    @property
    def engine(self):
        """Gets the engine of this V1beta1InferenceServiceSpec.  # noqa: E501


        :return: The engine of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: V1beta1EngineSpec
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this V1beta1InferenceServiceSpec.


        :param engine: The engine of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: V1beta1EngineSpec
        """

        self._engine = engine

    @property
    def keda_config(self):
        """Gets the keda_config of this V1beta1InferenceServiceSpec.  # noqa: E501


        :return: The keda_config of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: V1beta1KedaConfig
        """
        return self._keda_config

    @keda_config.setter
    def keda_config(self, keda_config):
        """Sets the keda_config of this V1beta1InferenceServiceSpec.


        :param keda_config: The keda_config of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: V1beta1KedaConfig
        """

        self._keda_config = keda_config

    @property
    def model(self):
        """Gets the model of this V1beta1InferenceServiceSpec.  # noqa: E501


        :return: The model of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: V1beta1ModelRef
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this V1beta1InferenceServiceSpec.


        :param model: The model of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: V1beta1ModelRef
        """

        self._model = model

    @property
    def predictor(self):
        """Gets the predictor of this V1beta1InferenceServiceSpec.  # noqa: E501


        :return: The predictor of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: V1beta1PredictorSpec
        """
        return self._predictor

    @predictor.setter
    def predictor(self, predictor):
        """Sets the predictor of this V1beta1InferenceServiceSpec.


        :param predictor: The predictor of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: V1beta1PredictorSpec
        """
        if self.local_vars_configuration.client_side_validation and predictor is None:  # noqa: E501
            raise ValueError("Invalid value for `predictor`, must not be `None`")  # noqa: E501

        self._predictor = predictor

    @property
    def router(self):
        """Gets the router of this V1beta1InferenceServiceSpec.  # noqa: E501


        :return: The router of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: V1beta1RouterSpec
        """
        return self._router

    @router.setter
    def router(self, router):
        """Sets the router of this V1beta1InferenceServiceSpec.


        :param router: The router of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: V1beta1RouterSpec
        """

        self._router = router

    @property
    def runtime(self):
        """Gets the runtime of this V1beta1InferenceServiceSpec.  # noqa: E501


        :return: The runtime of this V1beta1InferenceServiceSpec.  # noqa: E501
        :rtype: V1beta1ServingRuntimeRef
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this V1beta1InferenceServiceSpec.


        :param runtime: The runtime of this V1beta1InferenceServiceSpec.  # noqa: E501
        :type: V1beta1ServingRuntimeRef
        """

        self._runtime = runtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1InferenceServiceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1InferenceServiceSpec):
            return True

        return self.to_dict() != other.to_dict()
