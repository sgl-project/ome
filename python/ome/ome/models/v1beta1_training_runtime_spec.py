# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1TrainingRuntimeSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "annotations": "dict(str, str)",
        "compartment_id": "str",
        "labels": "dict(str, str)",
        "ml_policy": "V1beta1MLPolicy",
        "pod_group_policy": "V1beta1PodGroupPolicy",
        "template": "V1beta1JobSetTemplateSpec",
    }

    attribute_map = {
        "annotations": "annotations",
        "compartment_id": "compartmentID",
        "labels": "labels",
        "ml_policy": "mlPolicy",
        "pod_group_policy": "podGroupPolicy",
        "template": "template",
    }

    def __init__(
        self,
        annotations=None,
        compartment_id=None,
        labels=None,
        ml_policy=None,
        pod_group_policy=None,
        template=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1TrainingRuntimeSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._compartment_id = None
        self._labels = None
        self._ml_policy = None
        self._pod_group_policy = None
        self._template = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if compartment_id is not None:
            self.compartment_id = compartment_id
        if labels is not None:
            self.labels = labels
        if ml_policy is not None:
            self.ml_policy = ml_policy
        if pod_group_policy is not None:
            self.pod_group_policy = pod_group_policy
        self.template = template

    @property
    def annotations(self):
        """Gets the annotations of this V1beta1TrainingRuntimeSpec.  # noqa: E501

        Annotations that will be added to the runtime spec. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :return: The annotations of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this V1beta1TrainingRuntimeSpec.

        Annotations that will be added to the runtime spec. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :param annotations: The annotations of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def compartment_id(self):
        """Gets the compartment_id of this V1beta1TrainingRuntimeSpec.  # noqa: E501

        The compartment ID to use for the training runtime  # noqa: E501

        :return: The compartment_id of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._compartment_id

    @compartment_id.setter
    def compartment_id(self, compartment_id):
        """Sets the compartment_id of this V1beta1TrainingRuntimeSpec.

        The compartment ID to use for the training runtime  # noqa: E501

        :param compartment_id: The compartment_id of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._compartment_id = compartment_id

    @property
    def labels(self):
        """Gets the labels of this V1beta1TrainingRuntimeSpec.  # noqa: E501

        Labels that will be added to the runtime spec. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :return: The labels of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1beta1TrainingRuntimeSpec.

        Labels that will be added to the runtime spec. More info: http://kubernetes.io/docs/user-guide/labels  # noqa: E501

        :param labels: The labels of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def ml_policy(self):
        """Gets the ml_policy of this V1beta1TrainingRuntimeSpec.  # noqa: E501


        :return: The ml_policy of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1MLPolicy
        """
        return self._ml_policy

    @ml_policy.setter
    def ml_policy(self, ml_policy):
        """Sets the ml_policy of this V1beta1TrainingRuntimeSpec.


        :param ml_policy: The ml_policy of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :type: V1beta1MLPolicy
        """

        self._ml_policy = ml_policy

    @property
    def pod_group_policy(self):
        """Gets the pod_group_policy of this V1beta1TrainingRuntimeSpec.  # noqa: E501


        :return: The pod_group_policy of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1PodGroupPolicy
        """
        return self._pod_group_policy

    @pod_group_policy.setter
    def pod_group_policy(self, pod_group_policy):
        """Sets the pod_group_policy of this V1beta1TrainingRuntimeSpec.


        :param pod_group_policy: The pod_group_policy of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :type: V1beta1PodGroupPolicy
        """

        self._pod_group_policy = pod_group_policy

    @property
    def template(self):
        """Gets the template of this V1beta1TrainingRuntimeSpec.  # noqa: E501


        :return: The template of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :rtype: V1beta1JobSetTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1beta1TrainingRuntimeSpec.


        :param template: The template of this V1beta1TrainingRuntimeSpec.  # noqa: E501
        :type: V1beta1JobSetTemplateSpec
        """
        if self.local_vars_configuration.client_side_validation and template is None:  # noqa: E501
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TrainingRuntimeSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1TrainingRuntimeSpec):
            return True

        return self.to_dict() != other.to_dict()
