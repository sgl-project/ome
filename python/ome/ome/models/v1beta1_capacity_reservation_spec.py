# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1CapacityReservationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "allow_borrowing": "bool",
        "cohort": "str",
        "compartment_id": "str",
        "preemption_rule": "SigsK8sIoKueueApisKueueV1beta1ClusterQueuePreemption",
        "priority_class_name": "str",
        "resource_groups": "list[SigsK8sIoKueueApisKueueV1beta1ResourceGroup]",
    }

    attribute_map = {
        "allow_borrowing": "allowBorrowing",
        "cohort": "cohort",
        "compartment_id": "compartmentID",
        "preemption_rule": "preemptionRule",
        "priority_class_name": "priorityClassName",
        "resource_groups": "resourceGroups",
    }

    def __init__(
        self,
        allow_borrowing=None,
        cohort="",
        compartment_id=None,
        preemption_rule=None,
        priority_class_name=None,
        resource_groups=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1CapacityReservationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allow_borrowing = None
        self._cohort = None
        self._compartment_id = None
        self._preemption_rule = None
        self._priority_class_name = None
        self._resource_groups = None
        self.discriminator = None

        if allow_borrowing is not None:
            self.allow_borrowing = allow_borrowing
        if cohort is not None:
            self.cohort = cohort
        if compartment_id is not None:
            self.compartment_id = compartment_id
        if preemption_rule is not None:
            self.preemption_rule = preemption_rule
        if priority_class_name is not None:
            self.priority_class_name = priority_class_name
        self.resource_groups = resource_groups

    @property
    def allow_borrowing(self):
        """Gets the allow_borrowing of this V1beta1CapacityReservationSpec.  # noqa: E501

        AllowBorrowing defines if this capacity reservation can borrow resources from others.  # noqa: E501

        :return: The allow_borrowing of this V1beta1CapacityReservationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._allow_borrowing

    @allow_borrowing.setter
    def allow_borrowing(self, allow_borrowing):
        """Sets the allow_borrowing of this V1beta1CapacityReservationSpec.

        AllowBorrowing defines if this capacity reservation can borrow resources from others.  # noqa: E501

        :param allow_borrowing: The allow_borrowing of this V1beta1CapacityReservationSpec.  # noqa: E501
        :type: bool
        """

        self._allow_borrowing = allow_borrowing

    @property
    def cohort(self):
        """Gets the cohort of this V1beta1CapacityReservationSpec.  # noqa: E501

        Cohort specifies the cohort that the cluster queue belongs to, which is used for grouping cluster queues.  # noqa: E501

        :return: The cohort of this V1beta1CapacityReservationSpec.  # noqa: E501
        :rtype: str
        """
        return self._cohort

    @cohort.setter
    def cohort(self, cohort):
        """Sets the cohort of this V1beta1CapacityReservationSpec.

        Cohort specifies the cohort that the cluster queue belongs to, which is used for grouping cluster queues.  # noqa: E501

        :param cohort: The cohort of this V1beta1CapacityReservationSpec.  # noqa: E501
        :type: str
        """

        self._cohort = cohort

    @property
    def compartment_id(self):
        """Gets the compartment_id of this V1beta1CapacityReservationSpec.  # noqa: E501

        The compartment ID to use for the Capacity Reservation.  # noqa: E501

        :return: The compartment_id of this V1beta1CapacityReservationSpec.  # noqa: E501
        :rtype: str
        """
        return self._compartment_id

    @compartment_id.setter
    def compartment_id(self, compartment_id):
        """Sets the compartment_id of this V1beta1CapacityReservationSpec.

        The compartment ID to use for the Capacity Reservation.  # noqa: E501

        :param compartment_id: The compartment_id of this V1beta1CapacityReservationSpec.  # noqa: E501
        :type: str
        """

        self._compartment_id = compartment_id

    @property
    def preemption_rule(self):
        """Gets the preemption_rule of this V1beta1CapacityReservationSpec.  # noqa: E501


        :return: The preemption_rule of this V1beta1CapacityReservationSpec.  # noqa: E501
        :rtype: SigsK8sIoKueueApisKueueV1beta1ClusterQueuePreemption
        """
        return self._preemption_rule

    @preemption_rule.setter
    def preemption_rule(self, preemption_rule):
        """Sets the preemption_rule of this V1beta1CapacityReservationSpec.


        :param preemption_rule: The preemption_rule of this V1beta1CapacityReservationSpec.  # noqa: E501
        :type: SigsK8sIoKueueApisKueueV1beta1ClusterQueuePreemption
        """

        self._preemption_rule = preemption_rule

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this V1beta1CapacityReservationSpec.  # noqa: E501

        PriorityClassName is the priority class assigned to workloads associated to the Capacity Reservation.  # noqa: E501

        :return: The priority_class_name of this V1beta1CapacityReservationSpec.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this V1beta1CapacityReservationSpec.

        PriorityClassName is the priority class assigned to workloads associated to the Capacity Reservation.  # noqa: E501

        :param priority_class_name: The priority_class_name of this V1beta1CapacityReservationSpec.  # noqa: E501
        :type: str
        """

        self._priority_class_name = priority_class_name

    @property
    def resource_groups(self):
        """Gets the resource_groups of this V1beta1CapacityReservationSpec.  # noqa: E501

        ResourceGroups defines the list of resource groups for the Capacity Reservation. These are the groups of resources that the cluster queue will reserve. Limits the number of items to 50 to avoid exceeding validation complexity limits in Kubernetes API.  # noqa: E501

        :return: The resource_groups of this V1beta1CapacityReservationSpec.  # noqa: E501
        :rtype: list[SigsK8sIoKueueApisKueueV1beta1ResourceGroup]
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this V1beta1CapacityReservationSpec.

        ResourceGroups defines the list of resource groups for the Capacity Reservation. These are the groups of resources that the cluster queue will reserve. Limits the number of items to 50 to avoid exceeding validation complexity limits in Kubernetes API.  # noqa: E501

        :param resource_groups: The resource_groups of this V1beta1CapacityReservationSpec.  # noqa: E501
        :type: list[SigsK8sIoKueueApisKueueV1beta1ResourceGroup]
        """
        if (
            self.local_vars_configuration.client_side_validation
            and resource_groups is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `resource_groups`, must not be `None`")  # noqa: E501

        self._resource_groups = resource_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1CapacityReservationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1CapacityReservationSpec):
            return True

        return self.to_dict() != other.to_dict()
