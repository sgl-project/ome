# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1OrganizationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "config": "dict(str, str)",
        "disabled": "bool",
        "organization_id": "str",
        "secret_ref": "V1beta1SecretReference",
        "vendor": "str",
    }

    attribute_map = {
        "config": "config",
        "disabled": "disabled",
        "organization_id": "organizationId",
        "secret_ref": "secretRef",
        "vendor": "vendor",
    }

    def __init__(
        self,
        config=None,
        disabled=None,
        organization_id="",
        secret_ref=None,
        vendor=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1OrganizationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config = None
        self._disabled = None
        self._organization_id = None
        self._secret_ref = None
        self._vendor = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if disabled is not None:
            self.disabled = disabled
        self.organization_id = organization_id
        if secret_ref is not None:
            self.secret_ref = secret_ref
        self.vendor = vendor

    @property
    def config(self):
        """Gets the config of this V1beta1OrganizationSpec.  # noqa: E501

        Config contains vendor-specific configuration  # noqa: E501

        :return: The config of this V1beta1OrganizationSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this V1beta1OrganizationSpec.

        Config contains vendor-specific configuration  # noqa: E501

        :param config: The config of this V1beta1OrganizationSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._config = config

    @property
    def disabled(self):
        """Gets the disabled of this V1beta1OrganizationSpec.  # noqa: E501

        Disabled indicates whether the organization is disabled  # noqa: E501

        :return: The disabled of this V1beta1OrganizationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1beta1OrganizationSpec.

        Disabled indicates whether the organization is disabled  # noqa: E501

        :param disabled: The disabled of this V1beta1OrganizationSpec.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def organization_id(self):
        """Gets the organization_id of this V1beta1OrganizationSpec.  # noqa: E501

        OrganizationId is the platform-specific organization ID  # noqa: E501

        :return: The organization_id of this V1beta1OrganizationSpec.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this V1beta1OrganizationSpec.

        OrganizationId is the platform-specific organization ID  # noqa: E501

        :param organization_id: The organization_id of this V1beta1OrganizationSpec.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and organization_id is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def secret_ref(self):
        """Gets the secret_ref of this V1beta1OrganizationSpec.  # noqa: E501


        :return: The secret_ref of this V1beta1OrganizationSpec.  # noqa: E501
        :rtype: V1beta1SecretReference
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref):
        """Sets the secret_ref of this V1beta1OrganizationSpec.


        :param secret_ref: The secret_ref of this V1beta1OrganizationSpec.  # noqa: E501
        :type: V1beta1SecretReference
        """

        self._secret_ref = secret_ref

    @property
    def vendor(self):
        """Gets the vendor of this V1beta1OrganizationSpec.  # noqa: E501

        Vendor specifies the AI platform vendor (e.g., \"openai\", \"anthropic\")  # noqa: E501

        :return: The vendor of this V1beta1OrganizationSpec.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this V1beta1OrganizationSpec.

        Vendor specifies the AI platform vendor (e.g., \"openai\", \"anthropic\")  # noqa: E501

        :param vendor: The vendor of this V1beta1OrganizationSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vendor is None:  # noqa: E501
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1OrganizationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1OrganizationSpec):
            return True

        return self.to_dict() != other.to_dict()
