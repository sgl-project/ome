# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1RateLimitConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"limit": "int", "type": "str", "window": "str"}

    attribute_map = {"limit": "limit", "type": "type", "window": "window"}

    def __init__(self, limit=0, type="", window="", local_vars_configuration=None):  # noqa: E501
        """V1beta1RateLimitConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._limit = None
        self._type = None
        self._window = None
        self.discriminator = None

        self.limit = limit
        self.type = type
        self.window = window

    @property
    def limit(self):
        """Gets the limit of this V1beta1RateLimitConfig.  # noqa: E501

        Limit is the maximum allowed value  # noqa: E501

        :return: The limit of this V1beta1RateLimitConfig.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this V1beta1RateLimitConfig.

        Limit is the maximum allowed value  # noqa: E501

        :param limit: The limit of this V1beta1RateLimitConfig.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and limit is None:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def type(self):
        """Gets the type of this V1beta1RateLimitConfig.  # noqa: E501

        Type is the type of rate limit (e.g., \"requests\", \"tokens\")  # noqa: E501

        :return: The type of this V1beta1RateLimitConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1beta1RateLimitConfig.

        Type is the type of rate limit (e.g., \"requests\", \"tokens\")  # noqa: E501

        :param type: The type of this V1beta1RateLimitConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def window(self):
        """Gets the window of this V1beta1RateLimitConfig.  # noqa: E501

        Window is the time window for the limit (e.g., \"1m\", \"1d\")  # noqa: E501

        :return: The window of this V1beta1RateLimitConfig.  # noqa: E501
        :rtype: str
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this V1beta1RateLimitConfig.

        Window is the time window for the limit (e.g., \"1m\", \"1d\")  # noqa: E501

        :param window: The window of this V1beta1RateLimitConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and window is None:  # noqa: E501
            raise ValueError("Invalid value for `window`, must not be `None`")  # noqa: E501

        self._window = window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1RateLimitConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1RateLimitConfig):
            return True

        return self.to_dict() != other.to_dict()
