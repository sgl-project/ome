# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1TrainingJobSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "annotations": "dict(str, str)",
        "compartment_id": "str",
        "datasets": "V1beta1StorageSpec",
        "hyper_parameter_tuning_config": "V1beta1HyperparameterTuningConfig",
        "labels": "dict(str, str)",
        "model_config": "V1beta1ModelConfig",
        "runtime_ref": "V1beta1RuntimeRef",
        "suspend": "bool",
        "trainer": "V1beta1TrainerSpec",
    }

    attribute_map = {
        "annotations": "annotations",
        "compartment_id": "compartmentID",
        "datasets": "datasets",
        "hyper_parameter_tuning_config": "hyperParameterTuningConfig",
        "labels": "labels",
        "model_config": "modelConfig",
        "runtime_ref": "runtimeRef",
        "suspend": "suspend",
        "trainer": "trainer",
    }

    def __init__(
        self,
        annotations=None,
        compartment_id=None,
        datasets=None,
        hyper_parameter_tuning_config=None,
        labels=None,
        model_config=None,
        runtime_ref=None,
        suspend=None,
        trainer=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1TrainingJobSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._compartment_id = None
        self._datasets = None
        self._hyper_parameter_tuning_config = None
        self._labels = None
        self._model_config = None
        self._runtime_ref = None
        self._suspend = None
        self._trainer = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if compartment_id is not None:
            self.compartment_id = compartment_id
        self.datasets = datasets
        if hyper_parameter_tuning_config is not None:
            self.hyper_parameter_tuning_config = hyper_parameter_tuning_config
        if labels is not None:
            self.labels = labels
        self.model_config = model_config
        self.runtime_ref = runtime_ref
        if suspend is not None:
            self.suspend = suspend
        self.trainer = trainer

    @property
    def annotations(self):
        """Gets the annotations of this V1beta1TrainingJobSpec.  # noqa: E501

        Annotations to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :return: The annotations of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this V1beta1TrainingJobSpec.

        Annotations to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :param annotations: The annotations of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def compartment_id(self):
        """Gets the compartment_id of this V1beta1TrainingJobSpec.  # noqa: E501

        The compartment ID to use for the training job  # noqa: E501

        :return: The compartment_id of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: str
        """
        return self._compartment_id

    @compartment_id.setter
    def compartment_id(self, compartment_id):
        """Sets the compartment_id of this V1beta1TrainingJobSpec.

        The compartment ID to use for the training job  # noqa: E501

        :param compartment_id: The compartment_id of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: str
        """

        self._compartment_id = compartment_id

    @property
    def datasets(self):
        """Gets the datasets of this V1beta1TrainingJobSpec.  # noqa: E501


        :return: The datasets of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: V1beta1StorageSpec
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this V1beta1TrainingJobSpec.


        :param datasets: The datasets of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: V1beta1StorageSpec
        """
        if self.local_vars_configuration.client_side_validation and datasets is None:  # noqa: E501
            raise ValueError("Invalid value for `datasets`, must not be `None`")  # noqa: E501

        self._datasets = datasets

    @property
    def hyper_parameter_tuning_config(self):
        """Gets the hyper_parameter_tuning_config of this V1beta1TrainingJobSpec.  # noqa: E501


        :return: The hyper_parameter_tuning_config of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: V1beta1HyperparameterTuningConfig
        """
        return self._hyper_parameter_tuning_config

    @hyper_parameter_tuning_config.setter
    def hyper_parameter_tuning_config(self, hyper_parameter_tuning_config):
        """Sets the hyper_parameter_tuning_config of this V1beta1TrainingJobSpec.


        :param hyper_parameter_tuning_config: The hyper_parameter_tuning_config of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: V1beta1HyperparameterTuningConfig
        """

        self._hyper_parameter_tuning_config = hyper_parameter_tuning_config

    @property
    def labels(self):
        """Gets the labels of this V1beta1TrainingJobSpec.  # noqa: E501

        Labels to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :return: The labels of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1beta1TrainingJobSpec.

        Labels to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :param labels: The labels of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def model_config(self):
        """Gets the model_config of this V1beta1TrainingJobSpec.  # noqa: E501


        :return: The model_config of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: V1beta1ModelConfig
        """
        return self._model_config

    @model_config.setter
    def model_config(self, model_config):
        """Sets the model_config of this V1beta1TrainingJobSpec.


        :param model_config: The model_config of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: V1beta1ModelConfig
        """
        if (
            self.local_vars_configuration.client_side_validation
            and model_config is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `model_config`, must not be `None`")  # noqa: E501

        self._model_config = model_config

    @property
    def runtime_ref(self):
        """Gets the runtime_ref of this V1beta1TrainingJobSpec.  # noqa: E501


        :return: The runtime_ref of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: V1beta1RuntimeRef
        """
        return self._runtime_ref

    @runtime_ref.setter
    def runtime_ref(self, runtime_ref):
        """Sets the runtime_ref of this V1beta1TrainingJobSpec.


        :param runtime_ref: The runtime_ref of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: V1beta1RuntimeRef
        """
        if self.local_vars_configuration.client_side_validation and runtime_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `runtime_ref`, must not be `None`")  # noqa: E501

        self._runtime_ref = runtime_ref

    @property
    def suspend(self):
        """Gets the suspend of this V1beta1TrainingJobSpec.  # noqa: E501

        Whether the controller should suspend the running TrainJob. Defaults to false.  # noqa: E501

        :return: The suspend of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend):
        """Sets the suspend of this V1beta1TrainingJobSpec.

        Whether the controller should suspend the running TrainJob. Defaults to false.  # noqa: E501

        :param suspend: The suspend of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: bool
        """

        self._suspend = suspend

    @property
    def trainer(self):
        """Gets the trainer of this V1beta1TrainingJobSpec.  # noqa: E501


        :return: The trainer of this V1beta1TrainingJobSpec.  # noqa: E501
        :rtype: V1beta1TrainerSpec
        """
        return self._trainer

    @trainer.setter
    def trainer(self, trainer):
        """Sets the trainer of this V1beta1TrainingJobSpec.


        :param trainer: The trainer of this V1beta1TrainingJobSpec.  # noqa: E501
        :type: V1beta1TrainerSpec
        """
        if self.local_vars_configuration.client_side_validation and trainer is None:  # noqa: E501
            raise ValueError("Invalid value for `trainer`, must not be `None`")  # noqa: E501

        self._trainer = trainer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TrainingJobSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1TrainingJobSpec):
            return True

        return self.to_dict() != other.to_dict()
