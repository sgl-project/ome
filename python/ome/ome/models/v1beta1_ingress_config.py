# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self


class V1beta1IngressConfig(BaseModel):
    """
    V1beta1IngressConfig
    """  # noqa: E501

    additional_ingress_domains: Optional[List[StrictStr]] = Field(
        default=None, alias="additionalIngressDomains"
    )
    disable_ingress_creation: Optional[StrictBool] = Field(
        default=None, alias="disableIngressCreation"
    )
    disable_istio_virtual_host: Optional[StrictBool] = Field(
        default=None, alias="disableIstioVirtualHost"
    )
    domain_template: Optional[StrictStr] = Field(default=None, alias="domainTemplate")
    ingress_class_name: Optional[StrictStr] = Field(
        default=None, alias="ingressClassName"
    )
    ingress_domain: Optional[StrictStr] = Field(default=None, alias="ingressDomain")
    ingress_gateway: Optional[StrictStr] = Field(default=None, alias="ingressGateway")
    ingress_service: Optional[StrictStr] = Field(default=None, alias="ingressService")
    local_gateway: Optional[StrictStr] = Field(default=None, alias="localGateway")
    local_gateway_service: Optional[StrictStr] = Field(
        default=None, alias="localGatewayService"
    )
    path_template: Optional[StrictStr] = Field(default=None, alias="pathTemplate")
    url_scheme: Optional[StrictStr] = Field(default=None, alias="urlScheme")
    __properties: ClassVar[List[str]] = [
        "additionalIngressDomains",
        "disableIngressCreation",
        "disableIstioVirtualHost",
        "domainTemplate",
        "ingressClassName",
        "ingressDomain",
        "ingressGateway",
        "ingressService",
        "localGateway",
        "localGatewayService",
        "pathTemplate",
        "urlScheme",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1IngressConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1IngressConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "additionalIngressDomains": obj.get("additionalIngressDomains"),
                "disableIngressCreation": obj.get("disableIngressCreation"),
                "disableIstioVirtualHost": obj.get("disableIstioVirtualHost"),
                "domainTemplate": obj.get("domainTemplate"),
                "ingressClassName": obj.get("ingressClassName"),
                "ingressDomain": obj.get("ingressDomain"),
                "ingressGateway": obj.get("ingressGateway"),
                "ingressService": obj.get("ingressService"),
                "localGateway": obj.get("localGateway"),
                "localGatewayService": obj.get("localGatewayService"),
                "pathTemplate": obj.get("pathTemplate"),
                "urlScheme": obj.get("urlScheme"),
            }
        )
        return _obj
