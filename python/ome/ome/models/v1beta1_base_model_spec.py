# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1BaseModelSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "additional_metadata": "dict(str, str)",
        "compartment_id": "str",
        "deprecation_time": "V1Time",
        "disabled": "bool",
        "display_name": "str",
        "is_long_term_supported": "bool",
        "max_tokens": "int",
        "model_architecture": "str",
        "model_capabilities": "list[str]",
        "model_configuration": "K8sIoApimachineryPkgRuntimeRawExtension",
        "model_format": "V1beta1ModelFormat",
        "model_framework": "V1beta1ModelFrameworkSpec",
        "model_parameter_size": "str",
        "model_type": "str",
        "quantization": "str",
        "serving_mode": "list[str]",
        "storage": "V1beta1StorageSpec",
        "tensor_rtllm_configuration": "K8sIoApimachineryPkgRuntimeRawExtension",
        "vendor": "str",
        "version": "str",
    }

    attribute_map = {
        "additional_metadata": "additionalMetadata",
        "compartment_id": "compartmentID",
        "deprecation_time": "deprecationTime",
        "disabled": "disabled",
        "display_name": "displayName",
        "is_long_term_supported": "isLongTermSupported",
        "max_tokens": "maxTokens",
        "model_architecture": "modelArchitecture",
        "model_capabilities": "modelCapabilities",
        "model_configuration": "modelConfiguration",
        "model_format": "modelFormat",
        "model_framework": "modelFramework",
        "model_parameter_size": "modelParameterSize",
        "model_type": "modelType",
        "quantization": "quantization",
        "serving_mode": "servingMode",
        "storage": "storage",
        "tensor_rtllm_configuration": "tensorRTLLMConfiguration",
        "vendor": "vendor",
        "version": "version",
    }

    def __init__(
        self,
        additional_metadata=None,
        compartment_id=None,
        deprecation_time=None,
        disabled=None,
        display_name=None,
        is_long_term_supported=None,
        max_tokens=None,
        model_architecture=None,
        model_capabilities=None,
        model_configuration=None,
        model_format=None,
        model_framework=None,
        model_parameter_size=None,
        model_type=None,
        quantization=None,
        serving_mode=None,
        storage=None,
        tensor_rtllm_configuration=None,
        vendor=None,
        version=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1BaseModelSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._additional_metadata = None
        self._compartment_id = None
        self._deprecation_time = None
        self._disabled = None
        self._display_name = None
        self._is_long_term_supported = None
        self._max_tokens = None
        self._model_architecture = None
        self._model_capabilities = None
        self._model_configuration = None
        self._model_format = None
        self._model_framework = None
        self._model_parameter_size = None
        self._model_type = None
        self._quantization = None
        self._serving_mode = None
        self._storage = None
        self._tensor_rtllm_configuration = None
        self._vendor = None
        self._version = None
        self.discriminator = None

        if additional_metadata is not None:
            self.additional_metadata = additional_metadata
        if compartment_id is not None:
            self.compartment_id = compartment_id
        if deprecation_time is not None:
            self.deprecation_time = deprecation_time
        if disabled is not None:
            self.disabled = disabled
        if display_name is not None:
            self.display_name = display_name
        if is_long_term_supported is not None:
            self.is_long_term_supported = is_long_term_supported
        if max_tokens is not None:
            self.max_tokens = max_tokens
        if model_architecture is not None:
            self.model_architecture = model_architecture
        if model_capabilities is not None:
            self.model_capabilities = model_capabilities
        if model_configuration is not None:
            self.model_configuration = model_configuration
        self.model_format = model_format
        self.model_framework = model_framework
        if model_parameter_size is not None:
            self.model_parameter_size = model_parameter_size
        if model_type is not None:
            self.model_type = model_type
        if quantization is not None:
            self.quantization = quantization
        if serving_mode is not None:
            self.serving_mode = serving_mode
        self.storage = storage
        if tensor_rtllm_configuration is not None:
            self.tensor_rtllm_configuration = tensor_rtllm_configuration
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version

    @property
    def additional_metadata(self):
        """Gets the additional_metadata of this V1beta1BaseModelSpec.  # noqa: E501

        Additional metadata for the model  # noqa: E501

        :return: The additional_metadata of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_metadata

    @additional_metadata.setter
    def additional_metadata(self, additional_metadata):
        """Sets the additional_metadata of this V1beta1BaseModelSpec.

        Additional metadata for the model  # noqa: E501

        :param additional_metadata: The additional_metadata of this V1beta1BaseModelSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_metadata = additional_metadata

    @property
    def compartment_id(self):
        """Gets the compartment_id of this V1beta1BaseModelSpec.  # noqa: E501

        CompartmentID is the compartment ID of the model  # noqa: E501

        :return: The compartment_id of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._compartment_id

    @compartment_id.setter
    def compartment_id(self, compartment_id):
        """Sets the compartment_id of this V1beta1BaseModelSpec.

        CompartmentID is the compartment ID of the model  # noqa: E501

        :param compartment_id: The compartment_id of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._compartment_id = compartment_id

    @property
    def deprecation_time(self):
        """Gets the deprecation_time of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The deprecation_time of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: V1Time
        """
        return self._deprecation_time

    @deprecation_time.setter
    def deprecation_time(self, deprecation_time):
        """Sets the deprecation_time of this V1beta1BaseModelSpec.


        :param deprecation_time: The deprecation_time of this V1beta1BaseModelSpec.  # noqa: E501
        :type: V1Time
        """

        self._deprecation_time = deprecation_time

    @property
    def disabled(self):
        """Gets the disabled of this V1beta1BaseModelSpec.  # noqa: E501

        Whether the model is enabled or not  # noqa: E501

        :return: The disabled of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1beta1BaseModelSpec.

        Whether the model is enabled or not  # noqa: E501

        :param disabled: The disabled of this V1beta1BaseModelSpec.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this V1beta1BaseModelSpec.  # noqa: E501

        DisplayName is the user-friendly name of the model  # noqa: E501

        :return: The display_name of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1beta1BaseModelSpec.

        DisplayName is the user-friendly name of the model  # noqa: E501

        :param display_name: The display_name of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_long_term_supported(self):
        """Gets the is_long_term_supported of this V1beta1BaseModelSpec.  # noqa: E501

        LongTermSupported indicates if the model is long term supported  # noqa: E501

        :return: The is_long_term_supported of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: bool
        """
        return self._is_long_term_supported

    @is_long_term_supported.setter
    def is_long_term_supported(self, is_long_term_supported):
        """Sets the is_long_term_supported of this V1beta1BaseModelSpec.

        LongTermSupported indicates if the model is long term supported  # noqa: E501

        :param is_long_term_supported: The is_long_term_supported of this V1beta1BaseModelSpec.  # noqa: E501
        :type: bool
        """

        self._is_long_term_supported = is_long_term_supported

    @property
    def max_tokens(self):
        """Gets the max_tokens of this V1beta1BaseModelSpec.  # noqa: E501

        MaxTokens is the maximum number of tokens that can be processed by the model  # noqa: E501

        :return: The max_tokens of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this V1beta1BaseModelSpec.

        MaxTokens is the maximum number of tokens that can be processed by the model  # noqa: E501

        :param max_tokens: The max_tokens of this V1beta1BaseModelSpec.  # noqa: E501
        :type: int
        """

        self._max_tokens = max_tokens

    @property
    def model_architecture(self):
        """Gets the model_architecture of this V1beta1BaseModelSpec.  # noqa: E501

        ModelArchitecture of the model, e.g., \"LlamaForCausalLM\", \"GemmaForCausalLM\", \"MixtralForCausalLM\"  # noqa: E501

        :return: The model_architecture of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._model_architecture

    @model_architecture.setter
    def model_architecture(self, model_architecture):
        """Sets the model_architecture of this V1beta1BaseModelSpec.

        ModelArchitecture of the model, e.g., \"LlamaForCausalLM\", \"GemmaForCausalLM\", \"MixtralForCausalLM\"  # noqa: E501

        :param model_architecture: The model_architecture of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._model_architecture = model_architecture

    @property
    def model_capabilities(self):
        """Gets the model_capabilities of this V1beta1BaseModelSpec.  # noqa: E501

        ModelCapabilities of the model, e.g., \"TEXT_GENERATION\", \"TEXT_SUMMARIZATION\", \"TEXT_EMBEDDINGS\"  # noqa: E501

        :return: The model_capabilities of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_capabilities

    @model_capabilities.setter
    def model_capabilities(self, model_capabilities):
        """Sets the model_capabilities of this V1beta1BaseModelSpec.

        ModelCapabilities of the model, e.g., \"TEXT_GENERATION\", \"TEXT_SUMMARIZATION\", \"TEXT_EMBEDDINGS\"  # noqa: E501

        :param model_capabilities: The model_capabilities of this V1beta1BaseModelSpec.  # noqa: E501
        :type: list[str]
        """

        self._model_capabilities = model_capabilities

    @property
    def model_configuration(self):
        """Gets the model_configuration of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The model_configuration of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: K8sIoApimachineryPkgRuntimeRawExtension
        """
        return self._model_configuration

    @model_configuration.setter
    def model_configuration(self, model_configuration):
        """Sets the model_configuration of this V1beta1BaseModelSpec.


        :param model_configuration: The model_configuration of this V1beta1BaseModelSpec.  # noqa: E501
        :type: K8sIoApimachineryPkgRuntimeRawExtension
        """

        self._model_configuration = model_configuration

    @property
    def model_format(self):
        """Gets the model_format of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The model_format of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: V1beta1ModelFormat
        """
        return self._model_format

    @model_format.setter
    def model_format(self, model_format):
        """Sets the model_format of this V1beta1BaseModelSpec.


        :param model_format: The model_format of this V1beta1BaseModelSpec.  # noqa: E501
        :type: V1beta1ModelFormat
        """
        if (
            self.local_vars_configuration.client_side_validation
            and model_format is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `model_format`, must not be `None`")  # noqa: E501

        self._model_format = model_format

    @property
    def model_framework(self):
        """Gets the model_framework of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The model_framework of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: V1beta1ModelFrameworkSpec
        """
        return self._model_framework

    @model_framework.setter
    def model_framework(self, model_framework):
        """Sets the model_framework of this V1beta1BaseModelSpec.


        :param model_framework: The model_framework of this V1beta1BaseModelSpec.  # noqa: E501
        :type: V1beta1ModelFrameworkSpec
        """
        if (
            self.local_vars_configuration.client_side_validation
            and model_framework is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `model_framework`, must not be `None`")  # noqa: E501

        self._model_framework = model_framework

    @property
    def model_parameter_size(self):
        """Gets the model_parameter_size of this V1beta1BaseModelSpec.  # noqa: E501

        ModelParameterSize is the size of the model parameters, e.g., \"175B\"  # noqa: E501

        :return: The model_parameter_size of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._model_parameter_size

    @model_parameter_size.setter
    def model_parameter_size(self, model_parameter_size):
        """Sets the model_parameter_size of this V1beta1BaseModelSpec.

        ModelParameterSize is the size of the model parameters, e.g., \"175B\"  # noqa: E501

        :param model_parameter_size: The model_parameter_size of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._model_parameter_size = model_parameter_size

    @property
    def model_type(self):
        """Gets the model_type of this V1beta1BaseModelSpec.  # noqa: E501

        DEPRECATED: This field is deprecated and will be removed in future releases.  # noqa: E501

        :return: The model_type of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this V1beta1BaseModelSpec.

        DEPRECATED: This field is deprecated and will be removed in future releases.  # noqa: E501

        :param model_type: The model_type of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def quantization(self):
        """Gets the quantization of this V1beta1BaseModelSpec.  # noqa: E501

        Quantization of the model, e.g., \"fp8\", \"fbgemm_fp8\", \"int4\"  # noqa: E501

        :return: The quantization of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._quantization

    @quantization.setter
    def quantization(self, quantization):
        """Sets the quantization of this V1beta1BaseModelSpec.

        Quantization of the model, e.g., \"fp8\", \"fbgemm_fp8\", \"int4\"  # noqa: E501

        :param quantization: The quantization of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._quantization = quantization

    @property
    def serving_mode(self):
        """Gets the serving_mode of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The serving_mode of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._serving_mode

    @serving_mode.setter
    def serving_mode(self, serving_mode):
        """Sets the serving_mode of this V1beta1BaseModelSpec.


        :param serving_mode: The serving_mode of this V1beta1BaseModelSpec.  # noqa: E501
        :type: list[str]
        """

        self._serving_mode = serving_mode

    @property
    def storage(self):
        """Gets the storage of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The storage of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: V1beta1StorageSpec
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this V1beta1BaseModelSpec.


        :param storage: The storage of this V1beta1BaseModelSpec.  # noqa: E501
        :type: V1beta1StorageSpec
        """
        if self.local_vars_configuration.client_side_validation and storage is None:  # noqa: E501
            raise ValueError("Invalid value for `storage`, must not be `None`")  # noqa: E501

        self._storage = storage

    @property
    def tensor_rtllm_configuration(self):
        """Gets the tensor_rtllm_configuration of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The tensor_rtllm_configuration of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: K8sIoApimachineryPkgRuntimeRawExtension
        """
        return self._tensor_rtllm_configuration

    @tensor_rtllm_configuration.setter
    def tensor_rtllm_configuration(self, tensor_rtllm_configuration):
        """Sets the tensor_rtllm_configuration of this V1beta1BaseModelSpec.


        :param tensor_rtllm_configuration: The tensor_rtllm_configuration of this V1beta1BaseModelSpec.  # noqa: E501
        :type: K8sIoApimachineryPkgRuntimeRawExtension
        """

        self._tensor_rtllm_configuration = tensor_rtllm_configuration

    @property
    def vendor(self):
        """Gets the vendor of this V1beta1BaseModelSpec.  # noqa: E501

        Vendor of the model, e.g., \"NVIDIA\", \"Meta\", \"HuggingFace\"  # noqa: E501

        :return: The vendor of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this V1beta1BaseModelSpec.

        Vendor of the model, e.g., \"NVIDIA\", \"Meta\", \"HuggingFace\"  # noqa: E501

        :param vendor: The vendor of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this V1beta1BaseModelSpec.  # noqa: E501


        :return: The version of this V1beta1BaseModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1beta1BaseModelSpec.


        :param version: The version of this V1beta1BaseModelSpec.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1BaseModelSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1BaseModelSpec):
            return True

        return self.to_dict() != other.to_dict()
