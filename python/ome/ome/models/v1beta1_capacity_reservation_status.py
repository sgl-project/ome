# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1CapacityReservationStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "allocatable": "list[SigsK8sIoKueueApisKueueV1beta1FlavorUsage]",
        "association_usages": "list[V1beta1AssociationUsage]",
        "capacity": "list[SigsK8sIoKueueApisKueueV1beta1FlavorUsage]",
        "capacity_reservation_lifecycle_state": "str",
        "conditions": "list[V1beta1CapacityReservationCondition]",
        "lifecycle_detail": "str",
    }

    attribute_map = {
        "allocatable": "allocatable",
        "association_usages": "associationUsages",
        "capacity": "capacity",
        "capacity_reservation_lifecycle_state": "capacityReservationLifecycleState",
        "conditions": "conditions",
        "lifecycle_detail": "lifecycleDetail",
    }

    def __init__(
        self,
        allocatable=None,
        association_usages=None,
        capacity=None,
        capacity_reservation_lifecycle_state=None,
        conditions=None,
        lifecycle_detail=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1beta1CapacityReservationStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allocatable = None
        self._association_usages = None
        self._capacity = None
        self._capacity_reservation_lifecycle_state = None
        self._conditions = None
        self._lifecycle_detail = None
        self.discriminator = None

        if allocatable is not None:
            self.allocatable = allocatable
        if association_usages is not None:
            self.association_usages = association_usages
        if capacity is not None:
            self.capacity = capacity
        if capacity_reservation_lifecycle_state is not None:
            self.capacity_reservation_lifecycle_state = (
                capacity_reservation_lifecycle_state
            )
        if conditions is not None:
            self.conditions = conditions
        if lifecycle_detail is not None:
            self.lifecycle_detail = lifecycle_detail

    @property
    def allocatable(self):
        """Gets the allocatable of this V1beta1CapacityReservationStatus.  # noqa: E501

        Allocatable represents the resources that are available for scheduling.  # noqa: E501

        :return: The allocatable of this V1beta1CapacityReservationStatus.  # noqa: E501
        :rtype: list[SigsK8sIoKueueApisKueueV1beta1FlavorUsage]
        """
        return self._allocatable

    @allocatable.setter
    def allocatable(self, allocatable):
        """Sets the allocatable of this V1beta1CapacityReservationStatus.

        Allocatable represents the resources that are available for scheduling.  # noqa: E501

        :param allocatable: The allocatable of this V1beta1CapacityReservationStatus.  # noqa: E501
        :type: list[SigsK8sIoKueueApisKueueV1beta1FlavorUsage]
        """

        self._allocatable = allocatable

    @property
    def association_usages(self):
        """Gets the association_usages of this V1beta1CapacityReservationStatus.  # noqa: E501

        Usages of associations An association can be a DAC or a Workload  # noqa: E501

        :return: The association_usages of this V1beta1CapacityReservationStatus.  # noqa: E501
        :rtype: list[V1beta1AssociationUsage]
        """
        return self._association_usages

    @association_usages.setter
    def association_usages(self, association_usages):
        """Sets the association_usages of this V1beta1CapacityReservationStatus.

        Usages of associations An association can be a DAC or a Workload  # noqa: E501

        :param association_usages: The association_usages of this V1beta1CapacityReservationStatus.  # noqa: E501
        :type: list[V1beta1AssociationUsage]
        """

        self._association_usages = association_usages

    @property
    def capacity(self):
        """Gets the capacity of this V1beta1CapacityReservationStatus.  # noqa: E501

        Capacity represents the total resources available in this capacity reservation.  # noqa: E501

        :return: The capacity of this V1beta1CapacityReservationStatus.  # noqa: E501
        :rtype: list[SigsK8sIoKueueApisKueueV1beta1FlavorUsage]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this V1beta1CapacityReservationStatus.

        Capacity represents the total resources available in this capacity reservation.  # noqa: E501

        :param capacity: The capacity of this V1beta1CapacityReservationStatus.  # noqa: E501
        :type: list[SigsK8sIoKueueApisKueueV1beta1FlavorUsage]
        """

        self._capacity = capacity

    @property
    def capacity_reservation_lifecycle_state(self):
        """Gets the capacity_reservation_lifecycle_state of this V1beta1CapacityReservationStatus.  # noqa: E501

        CapacityReservationLifecycleState indicates the current phase of the CapacityReservation (e.g., \"active\", \"creating\", \"Failed\" etc.).  # noqa: E501

        :return: The capacity_reservation_lifecycle_state of this V1beta1CapacityReservationStatus.  # noqa: E501
        :rtype: str
        """
        return self._capacity_reservation_lifecycle_state

    @capacity_reservation_lifecycle_state.setter
    def capacity_reservation_lifecycle_state(
        self, capacity_reservation_lifecycle_state
    ):
        """Sets the capacity_reservation_lifecycle_state of this V1beta1CapacityReservationStatus.

        CapacityReservationLifecycleState indicates the current phase of the CapacityReservation (e.g., \"active\", \"creating\", \"Failed\" etc.).  # noqa: E501

        :param capacity_reservation_lifecycle_state: The capacity_reservation_lifecycle_state of this V1beta1CapacityReservationStatus.  # noqa: E501
        :type: str
        """

        self._capacity_reservation_lifecycle_state = (
            capacity_reservation_lifecycle_state
        )

    @property
    def conditions(self):
        """Gets the conditions of this V1beta1CapacityReservationStatus.  # noqa: E501

        Conditions represents health and operational states.  # noqa: E501

        :return: The conditions of this V1beta1CapacityReservationStatus.  # noqa: E501
        :rtype: list[V1beta1CapacityReservationCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this V1beta1CapacityReservationStatus.

        Conditions represents health and operational states.  # noqa: E501

        :param conditions: The conditions of this V1beta1CapacityReservationStatus.  # noqa: E501
        :type: list[V1beta1CapacityReservationCondition]
        """

        self._conditions = conditions

    @property
    def lifecycle_detail(self):
        """Gets the lifecycle_detail of this V1beta1CapacityReservationStatus.  # noqa: E501

        A message describing the current state in more detail that can provide actionable information.  # noqa: E501

        :return: The lifecycle_detail of this V1beta1CapacityReservationStatus.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle_detail

    @lifecycle_detail.setter
    def lifecycle_detail(self, lifecycle_detail):
        """Sets the lifecycle_detail of this V1beta1CapacityReservationStatus.

        A message describing the current state in more detail that can provide actionable information.  # noqa: E501

        :param lifecycle_detail: The lifecycle_detail of this V1beta1CapacityReservationStatus.  # noqa: E501
        :type: str
        """

        self._lifecycle_detail = lifecycle_detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1CapacityReservationStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1CapacityReservationStatus):
            return True

        return self.to_dict() != other.to_dict()
