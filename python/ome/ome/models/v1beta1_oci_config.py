# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class V1beta1OCIConfig(BaseModel):
    """
    V1beta1OCIConfig
    """  # noqa: E501

    ad_number_name: StrictStr = Field(
        description="AdNumberName for all applications", alias="adNumberName"
    )
    airport_code: StrictStr = Field(
        description="AirportCode for all applications", alias="airportCode"
    )
    application_stage: StrictStr = Field(
        description="ApplicationStage for all applications", alias="applicationStage"
    )
    internal_domain_name: StrictStr = Field(
        description="InternalDomainName for all applications",
        alias="internalDomainName",
    )
    namespace: StrictStr = Field(description="Namespace for service tenancy")
    public_domain_name: StrictStr = Field(
        description="PublicDomainName for all applications", alias="publicDomainName"
    )
    realm: StrictStr = Field(description="Realm for all applications")
    region: StrictStr = Field(description="Region for all applications")
    service_compartment_id: StrictStr = Field(
        description="compartment OCID, this is defaulted to the compartment OCID in agent service configMap",
        alias="serviceCompartmentId",
    )
    service_tenancy_id: StrictStr = Field(
        description="service tenancy OCID, this is defaulted to the tenancy OCID in agent service configMap",
        alias="serviceTenancyId",
    )
    stage: StrictStr = Field(description="Stage for all applications")
    __properties: ClassVar[List[str]] = [
        "adNumberName",
        "airportCode",
        "applicationStage",
        "internalDomainName",
        "namespace",
        "publicDomainName",
        "realm",
        "region",
        "serviceCompartmentId",
        "serviceTenancyId",
        "stage",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1OCIConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1OCIConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "adNumberName": (
                    obj.get("adNumberName")
                    if obj.get("adNumberName") is not None
                    else ""
                ),
                "airportCode": (
                    obj.get("airportCode") if obj.get("airportCode") is not None else ""
                ),
                "applicationStage": (
                    obj.get("applicationStage")
                    if obj.get("applicationStage") is not None
                    else ""
                ),
                "internalDomainName": (
                    obj.get("internalDomainName")
                    if obj.get("internalDomainName") is not None
                    else ""
                ),
                "namespace": (
                    obj.get("namespace") if obj.get("namespace") is not None else ""
                ),
                "publicDomainName": (
                    obj.get("publicDomainName")
                    if obj.get("publicDomainName") is not None
                    else ""
                ),
                "realm": obj.get("realm") if obj.get("realm") is not None else "",
                "region": obj.get("region") if obj.get("region") is not None else "",
                "serviceCompartmentId": (
                    obj.get("serviceCompartmentId")
                    if obj.get("serviceCompartmentId") is not None
                    else ""
                ),
                "serviceTenancyId": (
                    obj.get("serviceTenancyId")
                    if obj.get("serviceTenancyId") is not None
                    else ""
                ),
                "stage": obj.get("stage") if obj.get("stage") is not None else "",
            }
        )
        return _obj
