# coding: utf-8

"""
OME

Python SDK for OME  # noqa: E501

The version of the OpenAPI document: v0.1
Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from ome.configuration import Configuration


class V1beta1ModelConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"input_model": "str", "output_model": "V1beta1StorageSpec"}

    attribute_map = {"input_model": "inputModel", "output_model": "outputModel"}

    def __init__(
        self, input_model=None, output_model=None, local_vars_configuration=None
    ):  # noqa: E501
        """V1beta1ModelConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._input_model = None
        self._output_model = None
        self.discriminator = None

        if input_model is not None:
            self.input_model = input_model
        if output_model is not None:
            self.output_model = output_model

    @property
    def input_model(self):
        """Gets the input_model of this V1beta1ModelConfig.  # noqa: E501

        InputModel defines the base model name.  # noqa: E501

        :return: The input_model of this V1beta1ModelConfig.  # noqa: E501
        :rtype: str
        """
        return self._input_model

    @input_model.setter
    def input_model(self, input_model):
        """Sets the input_model of this V1beta1ModelConfig.

        InputModel defines the base model name.  # noqa: E501

        :param input_model: The input_model of this V1beta1ModelConfig.  # noqa: E501
        :type: str
        """

        self._input_model = input_model

    @property
    def output_model(self):
        """Gets the output_model of this V1beta1ModelConfig.  # noqa: E501


        :return: The output_model of this V1beta1ModelConfig.  # noqa: E501
        :rtype: V1beta1StorageSpec
        """
        return self._output_model

    @output_model.setter
    def output_model(self, output_model):
        """Sets the output_model of this V1beta1ModelConfig.


        :param output_model: The output_model of this V1beta1ModelConfig.  # noqa: E501
        :type: V1beta1StorageSpec
        """

        self._output_model = output_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ModelConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1ModelConfig):
            return True

        return self.to_dict() != other.to_dict()
