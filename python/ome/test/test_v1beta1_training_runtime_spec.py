# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_training_runtime_spec import V1beta1TrainingRuntimeSpec


class TestV1beta1TrainingRuntimeSpec(unittest.TestCase):
    """V1beta1TrainingRuntimeSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1TrainingRuntimeSpec:
        """Test V1beta1TrainingRuntimeSpec
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1TrainingRuntimeSpec`
        """
        model = V1beta1TrainingRuntimeSpec()
        if include_optional:
            return V1beta1TrainingRuntimeSpec(
                annotations = {
                    'key' : ''
                    },
                compartment_id = '',
                labels = {
                    'key' : ''
                    },
                ml_policy = ome.models.v1beta1/ml_policy.v1beta1.MLPolicy(
                    mpi = ome.models.v1beta1/mpiml_policy_config.v1beta1.MPIMLPolicyConfig(
                        mpi_implementation = '', 
                        num_proc_per_node = 56, 
                        run_launcher_as_node = True, 
                        ssh_auth_mount_path = '', ), 
                    num_nodes = 56, 
                    torch = ome.models.v1beta1/torch_ml_policy_config.v1beta1.TorchMLPolicyConfig(
                        elastic_policy = ome.models.v1beta1/torch_elastic_policy.v1beta1.TorchElasticPolicy(
                            max_nodes = 56, 
                            max_restarts = 56, 
                            metrics = [
                                None
                                ], 
                            min_nodes = 56, ), 
                        num_proc_per_node = '', ), ),
                pod_group_policy = ome.models.v1beta1/pod_group_policy.v1beta1.PodGroupPolicy(
                    coscheduling = ome.models.v1beta1/coscheduling_pod_group_policy_config.v1beta1.CoschedulingPodGroupPolicyConfig(
                        schedule_timeout_seconds = 56, ), ),
                template = ome.models.v1beta1/job_set_template_spec.v1beta1.JobSetTemplateSpec(
                    metadata = None, 
                    spec = None, )
            )
        else:
            return V1beta1TrainingRuntimeSpec(
                template = ome.models.v1beta1/job_set_template_spec.v1beta1.JobSetTemplateSpec(
                    metadata = None, 
                    spec = None, ),
        )
        """

    def testV1beta1TrainingRuntimeSpec(self):
        """Test V1beta1TrainingRuntimeSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
