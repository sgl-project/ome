# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_benchmark_job import V1beta1BenchmarkJob


class TestV1beta1BenchmarkJob(unittest.TestCase):
    """V1beta1BenchmarkJob unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1BenchmarkJob:
        """Test V1beta1BenchmarkJob
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1BenchmarkJob`
        """
        model = V1beta1BenchmarkJob()
        if include_optional:
            return V1beta1BenchmarkJob(
                api_version = '',
                kind = '',
                metadata = None,
                spec = ome.models.v1beta1/benchmark_job_spec.v1beta1.BenchmarkJobSpec(
                    additional_request_params = {
                        'key' : ''
                        }, 
                    dataset = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                        key = '', 
                        parameters = {
                            'key' : ''
                            }, 
                        path = '', 
                        schema_path = '', 
                        storage_uri = '', ), 
                    endpoint = ome.models.v1beta1/endpoint_spec.v1beta1.EndpointSpec(
                        inference_service = ome.models.v1beta1/inference_service_reference.v1beta1.InferenceServiceReference(
                            name = '', 
                            namespace = '', ), ), 
                    hugging_face_secret_reference = ome.models.v1beta1/hugging_face_secret_reference.v1beta1.HuggingFaceSecretReference(
                        name = '', ), 
                    max_requests_per_iteration = 56, 
                    max_time_per_iteration = 56, 
                    num_concurrency = [
                        56
                        ], 
                    output_location = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                        key = '', 
                        path = '', 
                        schema_path = '', 
                        storage_uri = '', ), 
                    pod_override = ome.models.v1beta1/pod_override.v1beta1.PodOverride(
                        affinity = None, 
                        env = [
                            None
                            ], 
                        env_from = [
                            None
                            ], 
                        image = '', 
                        node_selector = {
                            'key' : ''
                            }, 
                        resources = None, 
                        tolerations = [
                            None
                            ], 
                        volume_mounts = [
                            None
                            ], 
                        volumes = [
                            None
                            ], ), 
                    result_folder_name = '', 
                    service_metadata = ome.models.v1beta1/service_metadata.v1beta1.ServiceMetadata(
                        engine = '', 
                        gpu_count = 56, 
                        gpu_type = '', 
                        version = '', ), 
                    task = '', 
                    traffic_scenarios = [
                        ''
                        ], ),
                status = ome.models.v1beta1/benchmark_job_status.v1beta1.BenchmarkJobStatus(
                    completion_time = None, 
                    details = '', 
                    failure_message = '', 
                    last_reconcile_time = None, 
                    start_time = None, 
                    state = '', )
            )
        else:
            return V1beta1BenchmarkJob(
        )
        """

    def testV1beta1BenchmarkJob(self):
        """Test V1beta1BenchmarkJob"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
