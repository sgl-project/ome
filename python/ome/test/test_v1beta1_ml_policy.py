# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_ml_policy import V1beta1MLPolicy


class TestV1beta1MLPolicy(unittest.TestCase):
    """V1beta1MLPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1MLPolicy:
        """Test V1beta1MLPolicy
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1MLPolicy`
        """
        model = V1beta1MLPolicy()
        if include_optional:
            return V1beta1MLPolicy(
                mpi = ome.models.v1beta1/mpiml_policy_config.v1beta1.MPIMLPolicyConfig(
                    mpi_implementation = '', 
                    num_proc_per_node = 56, 
                    run_launcher_as_node = True, 
                    ssh_auth_mount_path = '', ),
                num_nodes = 56,
                torch = ome.models.v1beta1/torch_ml_policy_config.v1beta1.TorchMLPolicyConfig(
                    elastic_policy = ome.models.v1beta1/torch_elastic_policy.v1beta1.TorchElasticPolicy(
                        max_nodes = 56, 
                        max_restarts = 56, 
                        metrics = [
                            None
                            ], 
                        min_nodes = 56, ), 
                    num_proc_per_node = '', )
            )
        else:
            return V1beta1MLPolicy(
        )
        """

    def testV1beta1MLPolicy(self):
        """Test V1beta1MLPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
