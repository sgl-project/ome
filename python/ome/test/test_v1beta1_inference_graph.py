# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_inference_graph import V1beta1InferenceGraph


class TestV1beta1InferenceGraph(unittest.TestCase):
    """V1beta1InferenceGraph unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1InferenceGraph:
        """Test V1beta1InferenceGraph
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1InferenceGraph`
        """
        model = V1beta1InferenceGraph()
        if include_optional:
            return V1beta1InferenceGraph(
                api_version = '',
                kind = '',
                metadata = None,
                spec = ome.models.v1beta1/inference_graph_spec.v1beta1.InferenceGraphSpec(
                    affinity = None, 
                    max_replicas = 56, 
                    min_replicas = 56, 
                    node_name = '', 
                    node_selector = {
                        'key' : ''
                        }, 
                    nodes = {
                        'key' : ome.models.v1beta1/inference_router.v1beta1.InferenceRouter(
                            router_type = '', 
                            steps = [
                                ome.models.v1beta1/inference_step.v1beta1.InferenceStep(
                                    condition = '', 
                                    data = '', 
                                    dependency = '', 
                                    name = '', 
                                    node_name = '', 
                                    service_name = '', 
                                    service_url = '', 
                                    weight = 56, )
                                ], )
                        }, 
                    resources = None, 
                    scale_metric = '', 
                    scale_target = 56, 
                    service_account_name = '', 
                    timeout = 56, 
                    tolerations = [
                        None
                        ], ),
                status = ome.models.v1beta1/inference_graph_status.v1beta1.InferenceGraphStatus(
                    annotations = {
                        'key' : ''
                        }, 
                    conditions = [
                        None
                        ], 
                    observed_generation = 56, 
                    url = None, )
            )
        else:
            return V1beta1InferenceGraph(
        )
        """

    def testV1beta1InferenceGraph(self):
        """Test V1beta1InferenceGraph"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
