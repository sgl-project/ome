# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_inference_graph_list import V1beta1InferenceGraphList


class TestV1beta1InferenceGraphList(unittest.TestCase):
    """V1beta1InferenceGraphList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1InferenceGraphList:
        """Test V1beta1InferenceGraphList
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1InferenceGraphList`
        """
        model = V1beta1InferenceGraphList()
        if include_optional:
            return V1beta1InferenceGraphList(
                api_version = '',
                items = [
                    ome.models.v1beta1/inference_graph.v1beta1.InferenceGraph(
                        api_version = '', 
                        kind = '', 
                        metadata = None, 
                        spec = ome.models.v1beta1/inference_graph_spec.v1beta1.InferenceGraphSpec(
                            affinity = None, 
                            max_replicas = 56, 
                            min_replicas = 56, 
                            node_name = '', 
                            node_selector = {
                                'key' : ''
                                }, 
                            nodes = {
                                'key' : ome.models.v1beta1/inference_router.v1beta1.InferenceRouter(
                                    router_type = '', 
                                    steps = [
                                        ome.models.v1beta1/inference_step.v1beta1.InferenceStep(
                                            condition = '', 
                                            data = '', 
                                            dependency = '', 
                                            name = '', 
                                            node_name = '', 
                                            service_name = '', 
                                            service_url = '', 
                                            weight = 56, )
                                        ], )
                                }, 
                            resources = None, 
                            scale_metric = '', 
                            scale_target = 56, 
                            service_account_name = '', 
                            timeout = 56, 
                            tolerations = [
                                None
                                ], ), 
                        status = ome.models.v1beta1/inference_graph_status.v1beta1.InferenceGraphStatus(
                            annotations = {
                                'key' : ''
                                }, 
                            conditions = [
                                None
                                ], 
                            observed_generation = 56, 
                            url = None, ), )
                    ],
                kind = '',
                metadata = None
            )
        else:
            return V1beta1InferenceGraphList(
                items = [
                    ome.models.v1beta1/inference_graph.v1beta1.InferenceGraph(
                        api_version = '', 
                        kind = '', 
                        metadata = None, 
                        spec = ome.models.v1beta1/inference_graph_spec.v1beta1.InferenceGraphSpec(
                            affinity = None, 
                            max_replicas = 56, 
                            min_replicas = 56, 
                            node_name = '', 
                            node_selector = {
                                'key' : ''
                                }, 
                            nodes = {
                                'key' : ome.models.v1beta1/inference_router.v1beta1.InferenceRouter(
                                    router_type = '', 
                                    steps = [
                                        ome.models.v1beta1/inference_step.v1beta1.InferenceStep(
                                            condition = '', 
                                            data = '', 
                                            dependency = '', 
                                            name = '', 
                                            node_name = '', 
                                            service_name = '', 
                                            service_url = '', 
                                            weight = 56, )
                                        ], )
                                }, 
                            resources = None, 
                            scale_metric = '', 
                            scale_target = 56, 
                            service_account_name = '', 
                            timeout = 56, 
                            tolerations = [
                                None
                                ], ), 
                        status = ome.models.v1beta1/inference_graph_status.v1beta1.InferenceGraphStatus(
                            annotations = {
                                'key' : ''
                                }, 
                            conditions = [
                                None
                                ], 
                            observed_generation = 56, 
                            url = None, ), )
                    ],
        )
        """

    def testV1beta1InferenceGraphList(self):
        """Test V1beta1InferenceGraphList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
