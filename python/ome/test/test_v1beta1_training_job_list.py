# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_training_job_list import V1beta1TrainingJobList


class TestV1beta1TrainingJobList(unittest.TestCase):
    """V1beta1TrainingJobList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1TrainingJobList:
        """Test V1beta1TrainingJobList
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1TrainingJobList`
        """
        model = V1beta1TrainingJobList()
        if include_optional:
            return V1beta1TrainingJobList(
                api_version = '',
                items = [
                    ome.models.v1beta1/training_job.v1beta1.TrainingJob(
                        api_version = '', 
                        kind = '', 
                        metadata = None, 
                        spec = ome.models.v1beta1/training_job_spec.v1beta1.TrainingJobSpec(
                            annotations = {
                                'key' : ''
                                }, 
                            compartment_id = '', 
                            datasets = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                                key = '', 
                                parameters = {
                                    'key' : ''
                                    }, 
                                path = '', 
                                schema_path = '', 
                                storage_uri = '', ), 
                            hyperparameter_config = ome.models.v1beta1/hyperparameter_tuning_config.v1beta1.HyperparameterTuningConfig(
                                max_trials = 56, 
                                method = '', 
                                metric = ome.models.v1beta1/metric_config.v1beta1.MetricConfig(
                                    goal = '', 
                                    name = '', ), 
                                parameters = None, ), 
                            labels = {
                                'key' : ''
                                }, 
                            model_config = ome.models.v1beta1/model_config.v1beta1.ModelConfig(
                                input_model = '', 
                                output_model = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                                    key = '', 
                                    path = '', 
                                    schema_path = '', 
                                    storage_uri = '', ), ), 
                            runtime_ref = ome.models.v1beta1/runtime_ref.v1beta1.RuntimeRef(
                                api_group = '', 
                                kind = '', 
                                name = '', ), 
                            suspend = True, 
                            trainer = ome.models.v1beta1/trainer_spec.v1beta1.TrainerSpec(
                                args = [
                                    ''
                                    ], 
                                command = [
                                    ''
                                    ], 
                                env = [
                                    None
                                    ], 
                                image = '', 
                                num_nodes = 56, 
                                num_proc_per_node = '', 
                                resources_per_node = None, ), ), 
                        status = ome.models.v1beta1/training_job_status.v1beta1.TrainingJobStatus(
                            completion_time = None, 
                            conditions = [
                                None
                                ], 
                            jobs_status = [
                                ome.models.v1beta1/job_status.v1beta1.JobStatus(
                                    active = 56, 
                                    failed = 56, 
                                    name = '', 
                                    ready = 56, 
                                    succeeded = 56, 
                                    suspended = 56, )
                                ], 
                            last_reconcile_time = None, 
                            retry_count = 56, 
                            start_time = None, ), )
                    ],
                kind = '',
                metadata = None
            )
        else:
            return V1beta1TrainingJobList(
                items = [
                    ome.models.v1beta1/training_job.v1beta1.TrainingJob(
                        api_version = '', 
                        kind = '', 
                        metadata = None, 
                        spec = ome.models.v1beta1/training_job_spec.v1beta1.TrainingJobSpec(
                            annotations = {
                                'key' : ''
                                }, 
                            compartment_id = '', 
                            datasets = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                                key = '', 
                                parameters = {
                                    'key' : ''
                                    }, 
                                path = '', 
                                schema_path = '', 
                                storage_uri = '', ), 
                            hyperparameter_config = ome.models.v1beta1/hyperparameter_tuning_config.v1beta1.HyperparameterTuningConfig(
                                max_trials = 56, 
                                method = '', 
                                metric = ome.models.v1beta1/metric_config.v1beta1.MetricConfig(
                                    goal = '', 
                                    name = '', ), 
                                parameters = None, ), 
                            labels = {
                                'key' : ''
                                }, 
                            model_config = ome.models.v1beta1/model_config.v1beta1.ModelConfig(
                                input_model = '', 
                                output_model = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                                    key = '', 
                                    path = '', 
                                    schema_path = '', 
                                    storage_uri = '', ), ), 
                            runtime_ref = ome.models.v1beta1/runtime_ref.v1beta1.RuntimeRef(
                                api_group = '', 
                                kind = '', 
                                name = '', ), 
                            suspend = True, 
                            trainer = ome.models.v1beta1/trainer_spec.v1beta1.TrainerSpec(
                                args = [
                                    ''
                                    ], 
                                command = [
                                    ''
                                    ], 
                                env = [
                                    None
                                    ], 
                                image = '', 
                                num_nodes = 56, 
                                num_proc_per_node = '', 
                                resources_per_node = None, ), ), 
                        status = ome.models.v1beta1/training_job_status.v1beta1.TrainingJobStatus(
                            completion_time = None, 
                            conditions = [
                                None
                                ], 
                            jobs_status = [
                                ome.models.v1beta1/job_status.v1beta1.JobStatus(
                                    active = 56, 
                                    failed = 56, 
                                    name = '', 
                                    ready = 56, 
                                    succeeded = 56, 
                                    suspended = 56, )
                                ], 
                            last_reconcile_time = None, 
                            retry_count = 56, 
                            start_time = None, ), )
                    ],
        )
        """

    def testV1beta1TrainingJobList(self):
        """Test V1beta1TrainingJobList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
