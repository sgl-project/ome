# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_inference_graph_spec import V1beta1InferenceGraphSpec


class TestV1beta1InferenceGraphSpec(unittest.TestCase):
    """V1beta1InferenceGraphSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1InferenceGraphSpec:
        """Test V1beta1InferenceGraphSpec
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1InferenceGraphSpec`
        """
        model = V1beta1InferenceGraphSpec()
        if include_optional:
            return V1beta1InferenceGraphSpec(
                affinity = None,
                max_replicas = 56,
                min_replicas = 56,
                node_name = '',
                node_selector = {
                    'key' : ''
                    },
                nodes = {
                    'key' : ome.models.v1beta1/inference_router.v1beta1.InferenceRouter(
                        router_type = '', 
                        steps = [
                            ome.models.v1beta1/inference_step.v1beta1.InferenceStep(
                                condition = '', 
                                data = '', 
                                dependency = '', 
                                name = '', 
                                node_name = '', 
                                service_name = '', 
                                service_url = '', 
                                weight = 56, )
                            ], )
                    },
                resources = None,
                scale_metric = '',
                scale_target = 56,
                service_account_name = '',
                timeout = 56,
                tolerations = [
                    None
                    ]
            )
        else:
            return V1beta1InferenceGraphSpec(
                nodes = {
                    'key' : ome.models.v1beta1/inference_router.v1beta1.InferenceRouter(
                        router_type = '', 
                        steps = [
                            ome.models.v1beta1/inference_step.v1beta1.InferenceStep(
                                condition = '', 
                                data = '', 
                                dependency = '', 
                                name = '', 
                                node_name = '', 
                                service_name = '', 
                                service_url = '', 
                                weight = 56, )
                            ], )
                    },
        )
        """

    def testV1beta1InferenceGraphSpec(self):
        """Test V1beta1InferenceGraphSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
