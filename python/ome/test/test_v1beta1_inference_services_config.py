# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_inference_services_config import V1beta1InferenceServicesConfig


class TestV1beta1InferenceServicesConfig(unittest.TestCase):
    """V1beta1InferenceServicesConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1InferenceServicesConfig:
        """Test V1beta1InferenceServicesConfig
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1InferenceServicesConfig`
        """
        model = V1beta1InferenceServicesConfig()
        if include_optional:
            return V1beta1InferenceServicesConfig(
                multinode_prober = ome.models.v1beta1/multi_node_prober_config.v1beta1.MultiNodeProberConfig(
                    cpu_limit = '', 
                    cpu_request = '', 
                    image = '', 
                    memory_limit = '', 
                    memory_request = '', 
                    startup_failure_threshold = 56, 
                    startup_initial_delay_seconds = 56, 
                    startup_period_seconds = 56, 
                    startup_timeout_seconds = 56, 
                    unavailable_threshold_seconds = 56, ),
                oci_etc = ome.models.v1beta1/oci_config.v1beta1.OCIConfig(
                    ad_number_name = '', 
                    airport_code = '', 
                    application_stage = '', 
                    internal_domain_name = '', 
                    namespace = '', 
                    public_domain_name = '', 
                    realm = '', 
                    region = '', 
                    service_compartment_id = '', 
                    service_tenancy_id = '', 
                    stage = '', )
            )
        else:
            return V1beta1InferenceServicesConfig(
                multinode_prober = ome.models.v1beta1/multi_node_prober_config.v1beta1.MultiNodeProberConfig(
                    cpu_limit = '', 
                    cpu_request = '', 
                    image = '', 
                    memory_limit = '', 
                    memory_request = '', 
                    startup_failure_threshold = 56, 
                    startup_initial_delay_seconds = 56, 
                    startup_period_seconds = 56, 
                    startup_timeout_seconds = 56, 
                    unavailable_threshold_seconds = 56, ),
                oci_etc = ome.models.v1beta1/oci_config.v1beta1.OCIConfig(
                    ad_number_name = '', 
                    airport_code = '', 
                    application_stage = '', 
                    internal_domain_name = '', 
                    namespace = '', 
                    public_domain_name = '', 
                    realm = '', 
                    region = '', 
                    service_compartment_id = '', 
                    service_tenancy_id = '', 
                    stage = '', ),
        )
        """

    def testV1beta1InferenceServicesConfig(self):
        """Test V1beta1InferenceServicesConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
