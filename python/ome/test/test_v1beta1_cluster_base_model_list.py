# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_cluster_base_model_list import V1beta1ClusterBaseModelList


class TestV1beta1ClusterBaseModelList(unittest.TestCase):
    """V1beta1ClusterBaseModelList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1ClusterBaseModelList:
        """Test V1beta1ClusterBaseModelList
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1ClusterBaseModelList`
        """
        model = V1beta1ClusterBaseModelList()
        if include_optional:
            return V1beta1ClusterBaseModelList(
                api_version = '',
                items = [
                    ome.models.v1beta1/cluster_base_model.v1beta1.ClusterBaseModel(
                        api_version = '', 
                        kind = '', 
                        metadata = None, 
                        spec = ome.models.v1beta1/base_model_spec.v1beta1.BaseModelSpec(
                            additional_metadata = {
                                'key' : ''
                                }, 
                            compartment_id = '', 
                            deprecation_time = None, 
                            disabled = True, 
                            display_name = '', 
                            is_long_term_supported = True, 
                            max_tokens = 56, 
                            model_architecture = '', 
                            model_capabilities = [
                                ''
                                ], 
                            model_configuration = None, 
                            model_format = ome.models.v1beta1/model_format.v1beta1.ModelFormat(
                                name = '', 
                                version = '', ), 
                            model_framework = ome.models.v1beta1/model_framework_spec.v1beta1.ModelFrameworkSpec(
                                name = '', 
                                version = '', ), 
                            model_parameter_size = '', 
                            model_type = '', 
                            quantization = '', 
                            serving_mode = [
                                ''
                                ], 
                            storage = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                                key = '', 
                                parameters = {
                                    'key' : ''
                                    }, 
                                path = '', 
                                schema_path = '', 
                                storage_uri = '', ), 
                            tensor_rtllm_configuration = None, 
                            vendor = '', 
                            version = '', ), 
                        status = ome.models.v1beta1/model_status_spec.v1beta1.ModelStatusSpec(
                            lifecycle = '', 
                            nodes_failed = [
                                ''
                                ], 
                            nodes_ready = [
                                ''
                                ], 
                            state = '', ), )
                    ],
                kind = '',
                metadata = None
            )
        else:
            return V1beta1ClusterBaseModelList(
                items = [
                    ome.models.v1beta1/cluster_base_model.v1beta1.ClusterBaseModel(
                        api_version = '', 
                        kind = '', 
                        metadata = None, 
                        spec = ome.models.v1beta1/base_model_spec.v1beta1.BaseModelSpec(
                            additional_metadata = {
                                'key' : ''
                                }, 
                            compartment_id = '', 
                            deprecation_time = None, 
                            disabled = True, 
                            display_name = '', 
                            is_long_term_supported = True, 
                            max_tokens = 56, 
                            model_architecture = '', 
                            model_capabilities = [
                                ''
                                ], 
                            model_configuration = None, 
                            model_format = ome.models.v1beta1/model_format.v1beta1.ModelFormat(
                                name = '', 
                                version = '', ), 
                            model_framework = ome.models.v1beta1/model_framework_spec.v1beta1.ModelFrameworkSpec(
                                name = '', 
                                version = '', ), 
                            model_parameter_size = '', 
                            model_type = '', 
                            quantization = '', 
                            serving_mode = [
                                ''
                                ], 
                            storage = ome.models.v1beta1/storage_spec.v1beta1.StorageSpec(
                                key = '', 
                                parameters = {
                                    'key' : ''
                                    }, 
                                path = '', 
                                schema_path = '', 
                                storage_uri = '', ), 
                            tensor_rtllm_configuration = None, 
                            vendor = '', 
                            version = '', ), 
                        status = ome.models.v1beta1/model_status_spec.v1beta1.ModelStatusSpec(
                            lifecycle = '', 
                            nodes_failed = [
                                ''
                                ], 
                            nodes_ready = [
                                ''
                                ], 
                            state = '', ), )
                    ],
        )
        """

    def testV1beta1ClusterBaseModelList(self):
        """Test V1beta1ClusterBaseModelList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
