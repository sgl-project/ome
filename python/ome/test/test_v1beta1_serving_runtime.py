# coding: utf-8

"""
OME

Python SDK for OME

The version of the OpenAPI document: v0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from ome.models.v1beta1_serving_runtime import V1beta1ServingRuntime


class TestV1beta1ServingRuntime(unittest.TestCase):
    """V1beta1ServingRuntime unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1ServingRuntime:
        """Test V1beta1ServingRuntime
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V1beta1ServingRuntime`
        """
        model = V1beta1ServingRuntime()
        if include_optional:
            return V1beta1ServingRuntime(
                api_version = '',
                kind = '',
                metadata = None,
                spec = ome.models.v1beta1/serving_runtime_spec.v1beta1.ServingRuntimeSpec(
                    affinity = None, 
                    annotations = {
                        'key' : ''
                        }, 
                    built_in_adapter = ome.models.v1beta1/built_in_adapter.v1beta1.BuiltInAdapter(
                        env = [
                            None
                            ], 
                        model_loading_timeout_millis = 56, 
                        server_type = '', ), 
                    compartment_id = '', 
                    containers = [
                        None
                        ], 
                    disabled = True, 
                    dns_policy = '', 
                    host_ipc = True, 
                    host_network = True, 
                    http_data_endpoint = '', 
                    image_pull_secrets = [
                        None
                        ], 
                    labels = {
                        'key' : ''
                        }, 
                    model_size_range = ome.models.v1beta1/model_size_range_spec.v1beta1.ModelSizeRangeSpec(
                        max = '', 
                        min = '', ), 
                    node_selector = {
                        'key' : ''
                        }, 
                    pipeline_parallelism = True, 
                    protocol_versions = [
                        ''
                        ], 
                    replicas = 56, 
                    scheduler_name = '', 
                    supported_model_formats = [
                        ome.models.v1beta1/supported_model_format.v1beta1.SupportedModelFormat(
                            auto_select = True, 
                            model_architecture = '', 
                            model_format = ome.models.v1beta1/model_format.v1beta1.ModelFormat(
                                name = '', 
                                version = '', ), 
                            model_framework = ome.models.v1beta1/model_framework_spec.v1beta1.ModelFrameworkSpec(
                                name = '', 
                                version = '', ), 
                            model_type = '', 
                            name = '', 
                            priority = 56, 
                            quantization = '', 
                            version = '', )
                        ], 
                    tolerations = [
                        None
                        ], 
                    volumes = [
                        None
                        ], 
                    workers = ome.models.v1beta1/worker_pod_spec.v1beta1.WorkerPodSpec(
                        affinity = None, 
                        containers = [
                            None
                            ], 
                        dns_policy = '', 
                        host_ipc = True, 
                        host_network = True, 
                        scheduler_name = '', 
                        size = 56, ), ),
                status = ome.models.status.status()
            )
        else:
            return V1beta1ServingRuntime(
        )
        """

    def testV1beta1ServingRuntime(self):
        """Test V1beta1ServingRuntime"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
